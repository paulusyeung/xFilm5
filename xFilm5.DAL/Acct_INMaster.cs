using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace xFilm5.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.Acct_INMaster.
    /// Date Created:   2016-06-25 12:41:42
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class Acct_INMaster
    {
        private int key = 0;
        private int iD = 0;
        private int invoiceNumber = 0;
        private DateTime invoiceDate = DateTime.Parse("1900-1-1");
        private decimal invoiceAmount;
        private int clientID = 0;
        private int orderID = 0;
        private int paymentType = 0;
        private string remarks = String.Empty;
        private bool paid;
        private DateTime paidOn = DateTime.Parse("1900-1-1");
        private decimal paidAmount;
        private string paidRef = String.Empty;
        private int createdBy = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private int lastModifiedBy = 0;
        private DateTime lastModifiedOn = DateTime.Parse("1900-1-1");
        private short status;

        /// <summary>
        /// Initialize an new empty Acct_INMaster object.
        /// </summary>
        public Acct_INMaster()
        {
        }

        /// <summary>
        /// Initialize a new Acct_INMaster object with the given parameters.
        /// </summary>
        public Acct_INMaster(int iD, int invoiceNumber, DateTime invoiceDate, decimal invoiceAmount, int clientID, int orderID, int paymentType, string remarks, bool paid, DateTime paidOn, decimal paidAmount, string paidRef, int createdBy, DateTime createdOn, int lastModifiedBy, DateTime lastModifiedOn, short status)
        {
            this.iD = iD;
            this.invoiceNumber = invoiceNumber;
            this.invoiceDate = invoiceDate;
            this.invoiceAmount = invoiceAmount;
            this.clientID = clientID;
            this.orderID = orderID;
            this.paymentType = paymentType;
            this.remarks = remarks;
            this.paid = paid;
            this.paidOn = paidOn;
            this.paidAmount = paidAmount;
            this.paidRef = paidRef;
            this.createdBy = createdBy;
            this.createdOn = createdOn;
            this.lastModifiedBy = lastModifiedBy;
            this.lastModifiedOn = lastModifiedOn;
            this.status = status;
        }

        /// <summary>
        /// Loads a Acct_INMaster object from the database using the given ID
        /// </summary>
        /// <param name="iD">The primary key value</param>
        /// <returns>A Acct_INMaster object</returns>
        public static Acct_INMaster Load(int iD)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ID", iD) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spAcct_INMaster_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    Acct_INMaster result = new Acct_INMaster();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a Acct_INMaster object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A Acct_INMaster object</returns>
        public static Acct_INMaster LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spAcct_INMaster_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    Acct_INMaster result = new Acct_INMaster();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a collection of Acct_INMaster objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Acct_INMaster objects in the database.</returns>
        public static Acct_INMasterCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] { };
            return LoadCollection("spAcct_INMaster_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Acct_INMaster objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Acct_INMaster objects in the database ordered by the columns specified.</returns>
        public static Acct_INMasterCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length - 1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spAcct_INMaster_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Acct_INMaster objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Acct_INMaster objects in the database.</returns>
        public static Acct_INMasterCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spAcct_INMaster_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Acct_INMaster objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Acct_INMaster objects in the database ordered by the columns specified.</returns>
        public static Acct_INMasterCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length - 1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spAcct_INMaster_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Acct_INMaster objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Acct_INMaster objects in the database.</returns>
        public static Acct_INMasterCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            Acct_INMasterCollection result = new Acct_INMasterCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    Acct_INMaster tmp = new Acct_INMaster();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a Acct_INMaster object from the database.
        /// </summary>
        /// <param name="iD">The primary key value</param>
        public static void Delete(int iD)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ID", iD) };
            SqlHelper.Default.ExecuteNonQuery("spAcct_INMaster_DelRec", parameterValues);
        }


        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetInt32(0);
                if (!reader.IsDBNull(0)) iD = reader.GetInt32(0);
                if (!reader.IsDBNull(1)) invoiceNumber = reader.GetInt32(1);
                if (!reader.IsDBNull(2)) invoiceDate = reader.GetDateTime(2);
                if (!reader.IsDBNull(3)) invoiceAmount = reader.GetDecimal(3);
                if (!reader.IsDBNull(4)) clientID = reader.GetInt32(4);
                if (!reader.IsDBNull(5)) orderID = reader.GetInt32(5);
                if (!reader.IsDBNull(6)) paymentType = reader.GetInt32(6);
                if (!reader.IsDBNull(7)) remarks = reader.GetString(7);
                if (!reader.IsDBNull(8)) paid = reader.GetBoolean(8);
                if (!reader.IsDBNull(9)) paidOn = reader.GetDateTime(9);
                if (!reader.IsDBNull(10)) paidAmount = reader.GetDecimal(10);
                if (!reader.IsDBNull(11)) paidRef = reader.GetString(11);
                if (!reader.IsDBNull(12)) createdBy = reader.GetInt32(12);
                if (!reader.IsDBNull(13)) createdOn = reader.GetDateTime(13);
                if (!reader.IsDBNull(14)) lastModifiedBy = reader.GetInt32(14);
                if (!reader.IsDBNull(15)) lastModifiedOn = reader.GetDateTime(15);
                if (!reader.IsDBNull(16)) status = reader.GetInt16(16);
            }
        }

        public void Delete()
        {
            Delete(this.ID);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == 0)
                Insert();
            else
            {
                if (key != ID)
                    this.Delete();
                Update();
            }
        }

        public int ID
        {
            get { return iD; }
            set { iD = value; }
        }

        public int InvoiceNumber
        {
            get { return invoiceNumber; }
            set { invoiceNumber = value; }
        }

        public DateTime InvoiceDate
        {
            get { return invoiceDate; }
            set { invoiceDate = value; }
        }

        public decimal InvoiceAmount
        {
            get { return invoiceAmount; }
            set { invoiceAmount = value; }
        }

        public int ClientID
        {
            get { return clientID; }
            set { clientID = value; }
        }

        public int OrderID
        {
            get { return orderID; }
            set { orderID = value; }
        }

        public int PaymentType
        {
            get { return paymentType; }
            set { paymentType = value; }
        }

        public string Remarks
        {
            get { return remarks; }
            set { remarks = value; }
        }

        public bool Paid
        {
            get { return paid; }
            set { paid = value; }
        }

        public DateTime PaidOn
        {
            get { return paidOn; }
            set { paidOn = value; }
        }

        public decimal PaidAmount
        {
            get { return paidAmount; }
            set { paidAmount = value; }
        }

        public string PaidRef
        {
            get { return paidRef; }
            set { paidRef = value; }
        }

        public int CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public int LastModifiedBy
        {
            get { return lastModifiedBy; }
            set { lastModifiedBy = value; }
        }

        public DateTime LastModifiedOn
        {
            get { return lastModifiedOn; }
            set { lastModifiedOn = value; }
        }

        public short Status
        {
            get { return status; }
            set { status = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;

            SqlHelper.Default.ExecuteNonQuery("spAcct_INMaster_InsRec", "@ID", out returnedValue, parameterValues);

            iD = returnedValue != null ? (int)returnedValue : 0;
            key = returnedValue != null ? (int)returnedValue : 0;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();

            SqlHelper.Default.ExecuteNonQuery("spAcct_INMaster_UpdRec", parameterValues);
        }

        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[17];
            prams[0] = GetSqlParameter("@ID", ParameterDirection.Output, SqlDbType.Int, 4, this.ID);
            prams[1] = GetSqlParameter("@InvoiceNumber", ParameterDirection.Input, SqlDbType.Int, 4, this.InvoiceNumber);
            prams[2] = GetSqlParameter("@InvoiceDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.InvoiceDate);
            prams[3] = GetSqlParameter("@InvoiceAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.InvoiceAmount);
            prams[4] = GetSqlParameter("@ClientID", ParameterDirection.Input, SqlDbType.Int, 4, this.ClientID);
            prams[5] = GetSqlParameter("@OrderID", ParameterDirection.Input, SqlDbType.Int, 4, this.OrderID);
            prams[6] = GetSqlParameter("@PaymentType", ParameterDirection.Input, SqlDbType.Int, 4, this.PaymentType);
            prams[7] = GetSqlParameter("@Remarks", ParameterDirection.Input, SqlDbType.NVarChar, 255, this.Remarks);
            prams[8] = GetSqlParameter("@Paid", ParameterDirection.Input, SqlDbType.Bit, 1, this.Paid);
            prams[9] = GetSqlParameter("@PaidOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PaidOn);
            prams[10] = GetSqlParameter("@PaidAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.PaidAmount);
            prams[11] = GetSqlParameter("@PaidRef", ParameterDirection.Input, SqlDbType.NVarChar, 128, this.PaidRef);
            prams[12] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.Int, 4, this.CreatedBy);
            prams[13] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[14] = GetSqlParameter("@LastModifiedBy", ParameterDirection.Input, SqlDbType.Int, 4, this.LastModifiedBy);
            prams[15] = GetSqlParameter("@LastModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.LastModifiedOn);
            prams[16] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.Status);
            return prams;
        }

        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }

        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[]
            {
                GetSqlParameterWithoutDirection("@ID", SqlDbType.Int, 4, this.ID),
                GetSqlParameterWithoutDirection("@InvoiceNumber", SqlDbType.Int, 4, this.InvoiceNumber),
                GetSqlParameterWithoutDirection("@InvoiceDate", SqlDbType.DateTime, 8, this.InvoiceDate),
                GetSqlParameterWithoutDirection("@InvoiceAmount", SqlDbType.Money, 8, this.InvoiceAmount),
                GetSqlParameterWithoutDirection("@ClientID", SqlDbType.Int, 4, this.ClientID),
                GetSqlParameterWithoutDirection("@OrderID", SqlDbType.Int, 4, this.OrderID),
                GetSqlParameterWithoutDirection("@PaymentType", SqlDbType.Int, 4, this.PaymentType),
                GetSqlParameterWithoutDirection("@Remarks", SqlDbType.NVarChar, 255, this.Remarks),
                GetSqlParameterWithoutDirection("@Paid", SqlDbType.Bit, 1, this.Paid),
                GetSqlParameterWithoutDirection("@PaidOn", SqlDbType.DateTime, 8, this.PaidOn),
                GetSqlParameterWithoutDirection("@PaidAmount", SqlDbType.Money, 8, this.PaidAmount),
                GetSqlParameterWithoutDirection("@PaidRef", SqlDbType.NVarChar, 128, this.PaidRef),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.Int, 4, this.CreatedBy),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@LastModifiedBy", SqlDbType.Int, 4, this.LastModifiedBy),
                GetSqlParameterWithoutDirection("@LastModifiedOn", SqlDbType.DateTime, 8, this.LastModifiedOn),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.SmallInt, 2, this.Status)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("iD: " + iD.ToString()).Append("\r\n");
            builder.Append("invoiceNumber: " + invoiceNumber.ToString()).Append("\r\n");
            builder.Append("invoiceDate: " + invoiceDate.ToString()).Append("\r\n");
            builder.Append("invoiceAmount: " + invoiceAmount.ToString()).Append("\r\n");
            builder.Append("clientID: " + clientID.ToString()).Append("\r\n");
            builder.Append("orderID: " + orderID.ToString()).Append("\r\n");
            builder.Append("paymentType: " + paymentType.ToString()).Append("\r\n");
            builder.Append("remarks: " + remarks.ToString()).Append("\r\n");
            builder.Append("paid: " + paid.ToString()).Append("\r\n");
            builder.Append("paidOn: " + paidOn.ToString()).Append("\r\n");
            builder.Append("paidAmount: " + paidAmount.ToString()).Append("\r\n");
            builder.Append("paidRef: " + paidRef.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("lastModifiedBy: " + lastModifiedBy.ToString()).Append("\r\n");
            builder.Append("lastModifiedOn: " + lastModifiedOn.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }

        #region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[] { TextField });
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
        public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
        {
            string[] textField = { TextField };
            LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string[] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
        public static void LoadCombo(ref ComboBox ddList, string[] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
        {
            if (SwitchLocale)
            {
                TextField = GetSwitchLocale(TextField);
            }
            ddList.Items.Clear();

            Acct_INMasterCollection source;

            if (OrderBy == null || OrderBy.Length == 0)
            {
                OrderBy = TextField;
            }

            if (WhereClause.Length > 0)
            {
                source = Acct_INMaster.LoadCollection(WhereClause, OrderBy, true);
            }
            else
            {
                source = Acct_INMaster.LoadCollection(OrderBy, true);
            }

            Common.ComboList sourceList = new Common.ComboList();

            if (BlankLine)
            {
                sourceList.Add(new Common.ComboItem(BlankLineText, 0));
            }

            foreach (Acct_INMaster item in source)
            {
                bool filter = false;
                if (ParentFilter.Trim() != String.Empty)
                {
                    filter = true;
                    if (item.ClientID != 0)
                    {
                        filter = IgnorThis(item, ParentFilter);
                    }
                }
                if (!(filter))
                {
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ID));
                }
            }

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";

            if (ddList.Items.Count > 0)
            {
                ddList.SelectedIndex = 0;
            }
        }

        #endregion


        private static bool IgnorThis(Acct_INMaster target, string parentFilter)
        {
            bool result = true;
            parentFilter = parentFilter.Replace(" ", "");       // remove spaces
            parentFilter = parentFilter.Replace("'", "");       // remove '
            string[] parsed = parentFilter.Split('=');          // parse

            if (target.ClientID == 0)
            {
                PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
                string filterField = (string)pi.GetValue(target, null);
                if (filterField.ToLower() == parsed[1].ToLower())
                {
                    result = false;
                }
            }
            else
            {
                Acct_INMaster parentTemplate = Acct_INMaster.Load(target.ClientID);
                result = IgnorThis(parentTemplate, parentFilter);
            }
            return result;
        }

        private static string GetFormatedText(Acct_INMaster target, string[] textField, string textFormatString)
        {
            for (int i = 0; i < textField.Length; i++)
            {
                PropertyInfo pi = target.GetType().GetProperty(textField[i]);
                textFormatString = textFormatString.Replace("{" + i.ToString() + "}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
            }
            return textFormatString;
        }

        private static string[] GetSwitchLocale(string[] source)
        {
            switch (Common.Config.CurrentLanguageId)
            {
                case 2:
                    source[source.Length - 1] += "_Chs";
                    break;
                case 3:
                    source[source.Length - 1] += "_Cht";
                    break;
            }
            return source;
        }
    }


    /// <summary>
    /// Represents a collection of <see cref="Acct_INMaster">Acct_INMaster</see> objects.
    /// </summary>
    public class Acct_INMasterCollection : BindingList<Acct_INMaster>
    {
    }
}
