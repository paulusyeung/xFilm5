using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace xFilm5.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.ReceiptHeader.
    /// Date Created:   2016-11-13 09:15:22
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class ReceiptHeader
    {
        private int key = 0;
        private int receiptHeaderId = 0;
        private string receiptNumber = String.Empty;
        private DateTime receiptDate = DateTime.Parse("1900-1-1");
        private decimal receiptAmount;
        private int clientId = 0;
        private int paymentType = 0;
        private int iNMasterId = 0;
        private int clientUserId = 0;
        private string remarks = String.Empty;
        private bool paid;
        private DateTime paidOn = DateTime.Parse("1900-1-1");
        private decimal paidAmount;
        private string paidRef = String.Empty;
        private int status = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private int createdBy = 0;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private int modifiedBy = 0;

        /// <summary>
        /// Initialize an new empty ReceiptHeader object.
        /// </summary>
        public ReceiptHeader()
        {
        }
		
        /// <summary>
        /// Initialize a new ReceiptHeader object with the given parameters.
        /// </summary>
        public ReceiptHeader(int receiptHeaderId, string receiptNumber, DateTime receiptDate, decimal receiptAmount, int clientId, int paymentType, int iNMasterId, int clientUserId, string remarks, bool paid, DateTime paidOn, decimal paidAmount, string paidRef, int status, DateTime createdOn, int createdBy, DateTime modifiedOn, int modifiedBy)
        {
                this.receiptHeaderId = receiptHeaderId;
                this.receiptNumber = receiptNumber;
                this.receiptDate = receiptDate;
                this.receiptAmount = receiptAmount;
                this.clientId = clientId;
                this.paymentType = paymentType;
                this.iNMasterId = iNMasterId;
                this.clientUserId = clientUserId;
                this.remarks = remarks;
                this.paid = paid;
                this.paidOn = paidOn;
                this.paidAmount = paidAmount;
                this.paidRef = paidRef;
                this.status = status;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
        }	
		
        /// <summary>
        /// Loads a ReceiptHeader object from the database using the given ReceiptHeaderId
        /// </summary>
        /// <param name="receiptHeaderId">The primary key value</param>
        /// <returns>A ReceiptHeader object</returns>
        public static ReceiptHeader Load(int receiptHeaderId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ReceiptHeaderId", receiptHeaderId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spReceiptHeader_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    ReceiptHeader result = new ReceiptHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a ReceiptHeader object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A ReceiptHeader object</returns>
        public static ReceiptHeader LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spReceiptHeader_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    ReceiptHeader result = new ReceiptHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of ReceiptHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ReceiptHeader objects in the database.</returns>
        public static ReceiptHeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spReceiptHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ReceiptHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the ReceiptHeader objects in the database ordered by the columns specified.</returns>
        public static ReceiptHeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spReceiptHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ReceiptHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ReceiptHeader objects in the database.</returns>
        public static ReceiptHeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spReceiptHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ReceiptHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the ReceiptHeader objects in the database ordered by the columns specified.</returns>
        public static ReceiptHeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spReceiptHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ReceiptHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ReceiptHeader objects in the database.</returns>
        public static ReceiptHeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            ReceiptHeaderCollection result = new ReceiptHeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    ReceiptHeader tmp = new ReceiptHeader();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a ReceiptHeader object from the database.
        /// </summary>
        /// <param name="receiptHeaderId">The primary key value</param>
        public static void Delete(int receiptHeaderId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ReceiptHeaderId", receiptHeaderId) };
            SqlHelper.Default.ExecuteNonQuery("spReceiptHeader_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetInt32(0);
                if (!reader.IsDBNull(0)) receiptHeaderId = reader.GetInt32(0);
                if (!reader.IsDBNull(1)) receiptNumber = reader.GetString(1);
                if (!reader.IsDBNull(2)) receiptDate = reader.GetDateTime(2);
                if (!reader.IsDBNull(3)) receiptAmount = reader.GetDecimal(3);
                if (!reader.IsDBNull(4)) clientId = reader.GetInt32(4);
                if (!reader.IsDBNull(5)) paymentType = reader.GetInt32(5);
                if (!reader.IsDBNull(6)) iNMasterId = reader.GetInt32(6);
                if (!reader.IsDBNull(7)) clientUserId = reader.GetInt32(7);
                if (!reader.IsDBNull(8)) remarks = reader.GetString(8);
                if (!reader.IsDBNull(9)) paid = reader.GetBoolean(9);
                if (!reader.IsDBNull(10)) paidOn = reader.GetDateTime(10);
                if (!reader.IsDBNull(11)) paidAmount = reader.GetDecimal(11);
                if (!reader.IsDBNull(12)) paidRef = reader.GetString(12);
                if (!reader.IsDBNull(13)) status = reader.GetInt32(13);
                if (!reader.IsDBNull(14)) createdOn = reader.GetDateTime(14);
                if (!reader.IsDBNull(15)) createdBy = reader.GetInt32(15);
                if (!reader.IsDBNull(16)) modifiedOn = reader.GetDateTime(16);
                if (!reader.IsDBNull(17)) modifiedBy = reader.GetInt32(17);
            }
        }
		
        public void Delete()
        {
            Delete(this.ReceiptHeaderId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == 0)
                Insert();
            else
            {
                if (key != ReceiptHeaderId)
                    this.Delete();
                Update();
            }
        }

        public int ReceiptHeaderId
        {
            get { return receiptHeaderId; }
            set { receiptHeaderId = value; }
        }

        public string ReceiptNumber
        {
            get { return receiptNumber; }
            set { receiptNumber = value; }
        }

        public DateTime ReceiptDate
        {
            get { return receiptDate; }
            set { receiptDate = value; }
        }

        public decimal ReceiptAmount
        {
            get { return receiptAmount; }
            set { receiptAmount = value; }
        }

        public int ClientId
        {
            get { return clientId; }
            set { clientId = value; }
        }

        public int PaymentType
        {
            get { return paymentType; }
            set { paymentType = value; }
        }

        public int INMasterId
        {
            get { return iNMasterId; }
            set { iNMasterId = value; }
        }

        public int ClientUserId
        {
            get { return clientUserId; }
            set { clientUserId = value; }
        }

        public string Remarks
        {
            get { return remarks; }
            set { remarks = value; }
        }

        public bool Paid
        {
            get { return paid; }
            set { paid = value; }
        }

        public DateTime PaidOn
        {
            get { return paidOn; }
            set { paidOn = value; }
        }

        public decimal PaidAmount
        {
            get { return paidAmount; }
            set { paidAmount = value; }
        }

        public string PaidRef
        {
            get { return paidRef; }
            set { paidRef = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public int CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public int ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spReceiptHeader_InsRec", "@ReceiptHeaderId", out returnedValue, parameterValues);
            
            receiptHeaderId = returnedValue != null ? (int)returnedValue : 0;
            key = returnedValue != null ? (int)returnedValue : 0;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spReceiptHeader_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[18];
            prams[0] = GetSqlParameter("@ReceiptHeaderId", ParameterDirection.Output, SqlDbType.Int, 4, this.ReceiptHeaderId);
            prams[1] = GetSqlParameter("@ReceiptNumber", ParameterDirection.Input, SqlDbType.NVarChar, 16, this.ReceiptNumber);
            prams[2] = GetSqlParameter("@ReceiptDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ReceiptDate);
            prams[3] = GetSqlParameter("@ReceiptAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.ReceiptAmount);
            prams[4] = GetSqlParameter("@ClientId", ParameterDirection.Input, SqlDbType.Int, 4, this.ClientId);
            prams[5] = GetSqlParameter("@PaymentType", ParameterDirection.Input, SqlDbType.Int, 4, this.PaymentType);
            prams[6] = GetSqlParameter("@INMasterId", ParameterDirection.Input, SqlDbType.Int, 4, this.INMasterId);
            prams[7] = GetSqlParameter("@ClientUserId", ParameterDirection.Input, SqlDbType.Int, 4, this.ClientUserId);
            prams[8] = GetSqlParameter("@Remarks", ParameterDirection.Input, SqlDbType.NVarChar, 255, this.Remarks);
            prams[9] = GetSqlParameter("@Paid", ParameterDirection.Input, SqlDbType.Bit, 1, this.Paid);
            prams[10] = GetSqlParameter("@PaidOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PaidOn);
            prams[11] = GetSqlParameter("@PaidAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.PaidAmount);
            prams[12] = GetSqlParameter("@PaidRef", ParameterDirection.Input, SqlDbType.NVarChar, 128, this.PaidRef);
            prams[13] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[14] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[15] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.Int, 4, this.CreatedBy);
            prams[16] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[17] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.Int, 4, this.ModifiedBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@ReceiptHeaderId", SqlDbType.Int, 4, this.ReceiptHeaderId),
                GetSqlParameterWithoutDirection("@ReceiptNumber", SqlDbType.NVarChar, 16, this.ReceiptNumber),
                GetSqlParameterWithoutDirection("@ReceiptDate", SqlDbType.DateTime, 8, this.ReceiptDate),
                GetSqlParameterWithoutDirection("@ReceiptAmount", SqlDbType.Money, 8, this.ReceiptAmount),
                GetSqlParameterWithoutDirection("@ClientId", SqlDbType.Int, 4, this.ClientId),
                GetSqlParameterWithoutDirection("@PaymentType", SqlDbType.Int, 4, this.PaymentType),
                GetSqlParameterWithoutDirection("@INMasterId", SqlDbType.Int, 4, this.INMasterId),
                GetSqlParameterWithoutDirection("@ClientUserId", SqlDbType.Int, 4, this.ClientUserId),
                GetSqlParameterWithoutDirection("@Remarks", SqlDbType.NVarChar, 255, this.Remarks),
                GetSqlParameterWithoutDirection("@Paid", SqlDbType.Bit, 1, this.Paid),
                GetSqlParameterWithoutDirection("@PaidOn", SqlDbType.DateTime, 8, this.PaidOn),
                GetSqlParameterWithoutDirection("@PaidAmount", SqlDbType.Money, 8, this.PaidAmount),
                GetSqlParameterWithoutDirection("@PaidRef", SqlDbType.NVarChar, 128, this.PaidRef),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.Int, 4, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.Int, 4, this.ModifiedBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("receiptHeaderId: " + receiptHeaderId.ToString()).Append("\r\n");
            builder.Append("receiptNumber: " + receiptNumber.ToString()).Append("\r\n");
            builder.Append("receiptDate: " + receiptDate.ToString()).Append("\r\n");
            builder.Append("receiptAmount: " + receiptAmount.ToString()).Append("\r\n");
            builder.Append("clientId: " + clientId.ToString()).Append("\r\n");
            builder.Append("paymentType: " + paymentType.ToString()).Append("\r\n");
            builder.Append("iNMasterId: " + iNMasterId.ToString()).Append("\r\n");
            builder.Append("clientUserId: " + clientUserId.ToString()).Append("\r\n");
            builder.Append("remarks: " + remarks.ToString()).Append("\r\n");
            builder.Append("paid: " + paid.ToString()).Append("\r\n");
            builder.Append("paidOn: " + paidOn.ToString()).Append("\r\n");
            builder.Append("paidAmount: " + paidAmount.ToString()).Append("\r\n");
            builder.Append("paidRef: " + paidRef.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			ReceiptHeaderCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = ReceiptHeader.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = ReceiptHeader.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, 0));
			}
			
			foreach (ReceiptHeader item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.ClientId != 0)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ReceiptHeaderId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(ReceiptHeader target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.ClientId == 0)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				ReceiptHeader parentTemplate = ReceiptHeader.Load(target.ClientId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(ReceiptHeader target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="ReceiptHeader">ReceiptHeader</see> objects.
    /// </summary>
    public class ReceiptHeaderCollection : BindingList< ReceiptHeader>
    {
	}
}
