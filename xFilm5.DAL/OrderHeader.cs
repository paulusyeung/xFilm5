using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace xFilm5.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.OrderHeader.
    /// Date Created:   2016-06-25 12:47:46
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class OrderHeader
    {
        private int key = 0;
        private int iD = 0;
        private int clientID = 0;
        private int userID = 0;
        private int serviceType = 0;
        private int prePressOp = 0;
        private int proofingOp = 0;
        private bool attachment;
        private string attachmentURL = String.Empty;
        private string remarks = String.Empty;
        private DateTime dateReceived = DateTime.Parse("1900-1-1");
        private DateTime dateCompleted = DateTime.Parse("1900-1-1");
        private int status = 0;
        private int priority = 0;
        private decimal amount;
        private bool paid;
        private DateTime paidOn = DateTime.Parse("1900-1-1");
        private string paidRef = String.Empty;

        /// <summary>
        /// Initialize an new empty OrderHeader object.
        /// </summary>
        public OrderHeader()
        {
        }

        /// <summary>
        /// Initialize a new OrderHeader object with the given parameters.
        /// </summary>
        public OrderHeader(int iD, int clientID, int userID, int serviceType, int prePressOp, int proofingOp, bool attachment, string attachmentURL, string remarks, DateTime dateReceived, DateTime dateCompleted, int status, int priority, decimal amount, bool paid, DateTime paidOn, string paidRef)
        {
            this.iD = iD;
            this.clientID = clientID;
            this.userID = userID;
            this.serviceType = serviceType;
            this.prePressOp = prePressOp;
            this.proofingOp = proofingOp;
            this.attachment = attachment;
            this.attachmentURL = attachmentURL;
            this.remarks = remarks;
            this.dateReceived = dateReceived;
            this.dateCompleted = dateCompleted;
            this.status = status;
            this.priority = priority;
            this.amount = amount;
            this.paid = paid;
            this.paidOn = paidOn;
            this.paidRef = paidRef;
        }

        /// <summary>
        /// Loads a OrderHeader object from the database using the given ID
        /// </summary>
        /// <param name="iD">The primary key value</param>
        /// <returns>A OrderHeader object</returns>
        public static OrderHeader Load(int iD)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ID", iD) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spOrderHeader_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    OrderHeader result = new OrderHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a OrderHeader object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A OrderHeader object</returns>
        public static OrderHeader LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spOrderHeader_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    OrderHeader result = new OrderHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a collection of OrderHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the OrderHeader objects in the database.</returns>
        public static OrderHeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] { };
            return LoadCollection("spOrderHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of OrderHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the OrderHeader objects in the database ordered by the columns specified.</returns>
        public static OrderHeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length - 1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spOrderHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of OrderHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the OrderHeader objects in the database.</returns>
        public static OrderHeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spOrderHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of OrderHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the OrderHeader objects in the database ordered by the columns specified.</returns>
        public static OrderHeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length - 1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spOrderHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of OrderHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the OrderHeader objects in the database.</returns>
        public static OrderHeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            OrderHeaderCollection result = new OrderHeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    OrderHeader tmp = new OrderHeader();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a OrderHeader object from the database.
        /// </summary>
        /// <param name="iD">The primary key value</param>
        public static void Delete(int iD)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ID", iD) };
            SqlHelper.Default.ExecuteNonQuery("spOrderHeader_DelRec", parameterValues);
        }


        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetInt32(0);
                if (!reader.IsDBNull(0)) iD = reader.GetInt32(0);
                if (!reader.IsDBNull(1)) clientID = reader.GetInt32(1);
                if (!reader.IsDBNull(2)) userID = reader.GetInt32(2);
                if (!reader.IsDBNull(3)) serviceType = reader.GetInt32(3);
                if (!reader.IsDBNull(4)) prePressOp = reader.GetInt32(4);
                if (!reader.IsDBNull(5)) proofingOp = reader.GetInt32(5);
                if (!reader.IsDBNull(6)) attachment = reader.GetBoolean(6);
                if (!reader.IsDBNull(7)) attachmentURL = reader.GetString(7);
                if (!reader.IsDBNull(8)) remarks = reader.GetString(8);
                if (!reader.IsDBNull(9)) dateReceived = reader.GetDateTime(9);
                if (!reader.IsDBNull(10)) dateCompleted = reader.GetDateTime(10);
                if (!reader.IsDBNull(11)) status = reader.GetInt32(11);
                if (!reader.IsDBNull(12)) priority = reader.GetInt32(12);
                if (!reader.IsDBNull(13)) amount = reader.GetDecimal(13);
                if (!reader.IsDBNull(14)) paid = reader.GetBoolean(14);
                if (!reader.IsDBNull(15)) paidOn = reader.GetDateTime(15);
                if (!reader.IsDBNull(16)) paidRef = reader.GetString(16);
            }
        }

        public void Delete()
        {
            Delete(this.ID);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == 0)
                Insert();
            else
            {
                if (key != ID)
                    this.Delete();
                Update();
            }
        }

        public int ID
        {
            get { return iD; }
            set { iD = value; }
        }

        public int ClientID
        {
            get { return clientID; }
            set { clientID = value; }
        }

        public int UserID
        {
            get { return userID; }
            set { userID = value; }
        }

        public int ServiceType
        {
            get { return serviceType; }
            set { serviceType = value; }
        }

        public int PrePressOp
        {
            get { return prePressOp; }
            set { prePressOp = value; }
        }

        public int ProofingOp
        {
            get { return proofingOp; }
            set { proofingOp = value; }
        }

        public bool Attachment
        {
            get { return attachment; }
            set { attachment = value; }
        }

        public string AttachmentURL
        {
            get { return attachmentURL; }
            set { attachmentURL = value; }
        }

        public string Remarks
        {
            get { return remarks; }
            set { remarks = value; }
        }

        public DateTime DateReceived
        {
            get { return dateReceived; }
            set { dateReceived = value; }
        }

        public DateTime DateCompleted
        {
            get { return dateCompleted; }
            set { dateCompleted = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public int Priority
        {
            get { return priority; }
            set { priority = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public bool Paid
        {
            get { return paid; }
            set { paid = value; }
        }

        public DateTime PaidOn
        {
            get { return paidOn; }
            set { paidOn = value; }
        }

        public string PaidRef
        {
            get { return paidRef; }
            set { paidRef = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;

            SqlHelper.Default.ExecuteNonQuery("spOrderHeader_InsRec", "@ID", out returnedValue, parameterValues);

            iD = returnedValue != null ? (int)returnedValue : 0;
            key = returnedValue != null ? (int)returnedValue : 0;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();

            SqlHelper.Default.ExecuteNonQuery("spOrderHeader_UpdRec", parameterValues);
        }

        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[17];
            prams[0] = GetSqlParameter("@ID", ParameterDirection.Output, SqlDbType.Int, 4, this.ID);
            prams[1] = GetSqlParameter("@ClientID", ParameterDirection.Input, SqlDbType.Int, 4, this.ClientID);
            prams[2] = GetSqlParameter("@UserID", ParameterDirection.Input, SqlDbType.Int, 4, this.UserID);
            prams[3] = GetSqlParameter("@ServiceType", ParameterDirection.Input, SqlDbType.Int, 4, this.ServiceType);
            prams[4] = GetSqlParameter("@PrePressOp", ParameterDirection.Input, SqlDbType.Int, 4, this.PrePressOp);
            prams[5] = GetSqlParameter("@ProofingOp", ParameterDirection.Input, SqlDbType.Int, 4, this.ProofingOp);
            prams[6] = GetSqlParameter("@Attachment", ParameterDirection.Input, SqlDbType.Bit, 1, this.Attachment);
            prams[7] = GetSqlParameter("@AttachmentURL", ParameterDirection.Input, SqlDbType.NVarChar, 255, this.AttachmentURL);
            prams[8] = GetSqlParameter("@Remarks", ParameterDirection.Input, SqlDbType.NVarChar, 255, this.Remarks);
            prams[9] = GetSqlParameter("@DateReceived", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DateReceived);
            prams[10] = GetSqlParameter("@DateCompleted", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DateCompleted);
            prams[11] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[12] = GetSqlParameter("@Priority", ParameterDirection.Input, SqlDbType.Int, 4, this.Priority);
            prams[13] = GetSqlParameter("@Amount", ParameterDirection.Input, SqlDbType.Money, 8, this.Amount);
            prams[14] = GetSqlParameter("@Paid", ParameterDirection.Input, SqlDbType.Bit, 1, this.Paid);
            prams[15] = GetSqlParameter("@PaidOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PaidOn);
            prams[16] = GetSqlParameter("@PaidRef", ParameterDirection.Input, SqlDbType.NVarChar, 32, this.PaidRef);
            return prams;
        }

        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }

        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[]
            {
                GetSqlParameterWithoutDirection("@ID", SqlDbType.Int, 4, this.ID),
                GetSqlParameterWithoutDirection("@ClientID", SqlDbType.Int, 4, this.ClientID),
                GetSqlParameterWithoutDirection("@UserID", SqlDbType.Int, 4, this.UserID),
                GetSqlParameterWithoutDirection("@ServiceType", SqlDbType.Int, 4, this.ServiceType),
                GetSqlParameterWithoutDirection("@PrePressOp", SqlDbType.Int, 4, this.PrePressOp),
                GetSqlParameterWithoutDirection("@ProofingOp", SqlDbType.Int, 4, this.ProofingOp),
                GetSqlParameterWithoutDirection("@Attachment", SqlDbType.Bit, 1, this.Attachment),
                GetSqlParameterWithoutDirection("@AttachmentURL", SqlDbType.NVarChar, 255, this.AttachmentURL),
                GetSqlParameterWithoutDirection("@Remarks", SqlDbType.NVarChar, 255, this.Remarks),
                GetSqlParameterWithoutDirection("@DateReceived", SqlDbType.DateTime, 8, this.DateReceived),
                GetSqlParameterWithoutDirection("@DateCompleted", SqlDbType.DateTime, 8, this.DateCompleted),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@Priority", SqlDbType.Int, 4, this.Priority),
                GetSqlParameterWithoutDirection("@Amount", SqlDbType.Money, 8, this.Amount),
                GetSqlParameterWithoutDirection("@Paid", SqlDbType.Bit, 1, this.Paid),
                GetSqlParameterWithoutDirection("@PaidOn", SqlDbType.DateTime, 8, this.PaidOn),
                GetSqlParameterWithoutDirection("@PaidRef", SqlDbType.NVarChar, 32, this.PaidRef)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("iD: " + iD.ToString()).Append("\r\n");
            builder.Append("clientID: " + clientID.ToString()).Append("\r\n");
            builder.Append("userID: " + userID.ToString()).Append("\r\n");
            builder.Append("serviceType: " + serviceType.ToString()).Append("\r\n");
            builder.Append("prePressOp: " + prePressOp.ToString()).Append("\r\n");
            builder.Append("proofingOp: " + proofingOp.ToString()).Append("\r\n");
            builder.Append("attachment: " + attachment.ToString()).Append("\r\n");
            builder.Append("attachmentURL: " + attachmentURL.ToString()).Append("\r\n");
            builder.Append("remarks: " + remarks.ToString()).Append("\r\n");
            builder.Append("dateReceived: " + dateReceived.ToString()).Append("\r\n");
            builder.Append("dateCompleted: " + dateCompleted.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("priority: " + priority.ToString()).Append("\r\n");
            builder.Append("amount: " + amount.ToString()).Append("\r\n");
            builder.Append("paid: " + paid.ToString()).Append("\r\n");
            builder.Append("paidOn: " + paidOn.ToString()).Append("\r\n");
            builder.Append("paidRef: " + paidRef.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }

        #region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[] { TextField });
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
        public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
        {
            string[] textField = { TextField };
            LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string[] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
        public static void LoadCombo(ref ComboBox ddList, string[] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
        {
            if (SwitchLocale)
            {
                TextField = GetSwitchLocale(TextField);
            }
            ddList.Items.Clear();

            OrderHeaderCollection source;

            if (OrderBy == null || OrderBy.Length == 0)
            {
                OrderBy = TextField;
            }

            if (WhereClause.Length > 0)
            {
                source = OrderHeader.LoadCollection(WhereClause, OrderBy, true);
            }
            else
            {
                source = OrderHeader.LoadCollection(OrderBy, true);
            }

            Common.ComboList sourceList = new Common.ComboList();

            if (BlankLine)
            {
                sourceList.Add(new Common.ComboItem(BlankLineText, 0));
            }

            foreach (OrderHeader item in source)
            {
                bool filter = false;
                if (ParentFilter.Trim() != String.Empty)
                {
                    filter = true;
                    if (item.ClientID != 0)
                    {
                        filter = IgnorThis(item, ParentFilter);
                    }
                }
                if (!(filter))
                {
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ID));
                }
            }

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";

            if (ddList.Items.Count > 0)
            {
                ddList.SelectedIndex = 0;
            }
        }

        #endregion


        private static bool IgnorThis(OrderHeader target, string parentFilter)
        {
            bool result = true;
            parentFilter = parentFilter.Replace(" ", "");       // remove spaces
            parentFilter = parentFilter.Replace("'", "");       // remove '
            string[] parsed = parentFilter.Split('=');          // parse

            if (target.ClientID == 0)
            {
                PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
                string filterField = (string)pi.GetValue(target, null);
                if (filterField.ToLower() == parsed[1].ToLower())
                {
                    result = false;
                }
            }
            else
            {
                OrderHeader parentTemplate = OrderHeader.Load(target.ClientID);
                result = IgnorThis(parentTemplate, parentFilter);
            }
            return result;
        }

        private static string GetFormatedText(OrderHeader target, string[] textField, string textFormatString)
        {
            for (int i = 0; i < textField.Length; i++)
            {
                PropertyInfo pi = target.GetType().GetProperty(textField[i]);
                textFormatString = textFormatString.Replace("{" + i.ToString() + "}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
            }
            return textFormatString;
        }

        private static string[] GetSwitchLocale(string[] source)
        {
            switch (Common.Config.CurrentLanguageId)
            {
                case 2:
                    source[source.Length - 1] += "_Chs";
                    break;
                case 3:
                    source[source.Length - 1] += "_Cht";
                    break;
            }
            return source;
        }
    }


    /// <summary>
    /// Represents a collection of <see cref="OrderHeader">OrderHeader</see> objects.
    /// </summary>
    public class OrderHeaderCollection : BindingList<OrderHeader>
    {
    }
}
