using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Configuration;
using System.Web;

using Gizmox.WebGUI.Common;
using Gizmox.WebGUI.Common.Resources;
using Gizmox.WebGUI.Forms;

namespace xFilm5.DAL
{
    /// <summary>
    /// This is the Common utility for Data Access Layer.
    /// Date Created:   2016-06-24 07:04:01
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       Common for BusinessObjects_v5.0.cst
    /// </summary>
    public class Common
    {
        #region Enum
        public class Enums
        {
            public enum PosTxType
            {
                None,
                PayNow,
                PayLater
            }

            public enum Status
            {
                Inactive = -1,
                Draft = 0,
                Active,
                Power
            }

            /// <summary>
            /// 1 = Cancelled
            /// 2 = Queuing
            /// 3 = Retouch
            /// 4 = Printing
            /// 5 = ProofingOutgoing
            /// 6 = ProofingIncoming
            /// 7 = Ready
            /// 8 = Dispatch
            ///9 = Completed
            /// </summary>
            public enum Workflow
            {
                Cancelled = 1,
                Queuing,
                Retouch,
                Printing,
                ProofingOutgoing,
                ProofingIncoming,
                Ready,
                Dispatch,
                Completed
            }

            public enum OrderType
            {
                UploadFile = 1,
                DirectPrint,
                PsFile,
                Others,
                Plate,
                Plate5,
                Film5,
                Vps5
            }

            public enum Platform
            {
                PC = 1,
                Mac,
                iOS,
                Android,
                WindwsPhone
            }

            public enum Priority
            {
                Rush = 1,
                Express,
                Regular
            }

            public enum Software
            {
                PageMaker = 1,
                FreeHand = 3,
                Illustrator = 5,
                PhotoShop = 7,
                QuarkXpress = 9,
                CorelDraw = 11,
                MsWord = 13,
                Others = 15
            }

            public enum DeliveryMethod
            {
                PickUp = 1,
                DeliverTo
            }

            public enum EditMode
            {
                Add,
                Edit,
                Read
            }

            public enum UserRole
            {
                Customer = 1,
                Operator,
                Sales,
                Account,
                Admin,
                Workshop,
                Cashier
            }

            #region 2016.11.05 paulus: 工業 4.0
            public enum PrintQSubitemType
            {
                Ps,             // 收到 ps
                Vps,            // 有 vps
                Tiff,           // 有 tiff
                Cip3,           // 有 cip3
                Blueprint,      // 有 藍紙
                Plate,          // 有 鋅
                Order,          // 落咗荷打
                Receipt,        // 收咗貸
                Invoice,        // 開咗單
                Film            // 2017 追加
            }

            public enum DeviceType
            {
                Chrome,
                Firefox,
                Safari,
                Email,
                SMS,
                WhatsApp
            }
            #endregion
        }
        #endregion

        #region Config
        public class Config
        {
            private static string ConnectionString4Excel03
            {
                get
                {
                    return ConfigurationManager.ConnectionStrings["OleConn4Excel03"].ConnectionString;
                }
            }

            private static string ConnectionString4Excel07
            {
                get
                {
                    return ConfigurationManager.ConnectionStrings["OleConn4Excel07"].ConnectionString;
                }
            }

            public static OleDbConnection GetOleDbConnection(string dataSource)
            {
                string connString = string.Empty;

                if (dataSource.Length > 0)
                {
                    string ext = dataSource.Remove(0, dataSource.LastIndexOf('.') + 1);
                    switch (ext.ToLower().Trim())
                    {
                        case "xls":
                            connString = string.Format(ConnectionString4Excel03, dataSource);
                            break;
                        case "xlsx":
                            connString = string.Format(ConnectionString4Excel07, dataSource);
                            break;
                    }
                }

                if (!string.IsNullOrEmpty(connString))
                {
                    OleDbConnection oConn = new OleDbConnection(connString);

                    if (oConn.State == ConnectionState.Open)
                    {
                        oConn.Close();
                    }

                    return oConn;
                }
                else
                {
                    return null;
                }
            }

            public static string ConnectionString
            {
                get
                {
                    return WebConfigurationManager.ConnectionStrings["SysDb"].ConnectionString;
                }
            }

            public static int CurrentUserId
            {
                get
                {
                    int cookieUserId = 0;
                    if (HttpContext.Current.Request.Cookies["xFilm"] != null)
                    {
                        try
                        {
                            string userId = HttpContext.Current.Request.Cookies["xFilm"].Value;
                            cookieUserId = Convert.ToInt32(userId);

                            //cookieUserId = Convert.ToInt32(HttpContext.Current.Request.Cookies["xFilm3"].Value);
                        }
                        catch
                        {
                            cookieUserId = 0;
                        }
                    }
                    return cookieUserId;
                }
                set
                {
                    System.Web.HttpCookie oCookie = new System.Web.HttpCookie("xFilm");
                    DateTime now = DateTime.Now;

                    if (value != 0)
                    {
                        // create cookie
                        oCookie.Value = value.ToString();
                        oCookie.Expires = now.AddYears(1);

                        System.Web.HttpContext.Current.Response.Cookies.Add(oCookie);

                        //VWGContext.Current.Cookies["xFlim3"] = value.ToString();
                    }
                    else
                    {
                        // destroy cookie
                        oCookie.Value = value.ToString();
                        oCookie.Expires = now.AddDays(-1);

                        System.Web.HttpContext.Current.Response.Cookies.Add(oCookie);

                        //VWGContext.Current.Cookies["xFilm3"] = null;
                    }
                }
            }

            public static int CurrentLanguageId
            {
                get
                {
                    int result = 1;
                    string sLang = (string)System.Web.HttpContext.Current.Session["UserLanguage"];
                    if (sLang == null) sLang = System.Web.HttpContext.Current.Request.UserLanguages[0];

                    switch (sLang.ToLower())
                    {
                        case "chs":
                        case "zh-chs":
                        case "zh-cn":
                            result = 2;
                            break;
                        case "cht":
                        case "zh-cht":
                        case "zh-hk":
                        case "zh-tw":
                            result = 3;
                            break;
                        case "en":
                        case "en-us":
                        default:
                            result = 1;
                            break;
                    }
                    return result;
                }
            }

            public static string CurrentWordDict
            {
                get
                {
                    string result = "WordDict.xml";
                    return Path.Combine(VWGContext.Current.Config.GetDirectory("UserData"), result);
                }
            }

            /// <summary>
            /// Maximum records allowed in SQL Query
            /// Default = 500 records
            /// </summary>
            public static int SqlQueryLimit
            {
                get
                {
                    string sqlQueryLimit = "500";
                    if (ConfigurationManager.AppSettings["SqlQueryLimit"] != null)
                    {
                        sqlQueryLimit = ConfigurationManager.AppSettings["SqlQueryLimit"];
                    }
                    return Convert.ToInt32(sqlQueryLimit);
                }
            }

            /// <summary>
            /// Maximum Command Timed out of SQL Query
            /// Default = 600 seconds
            /// </summary>
            public static int CommandTimedOut
            {
                get
                {
                    string commandTimedOut = "600";
                    if (ConfigurationManager.AppSettings["CommandTimedOut"] != null)
                    {
                        commandTimedOut = ConfigurationManager.AppSettings["CommandTimedOut"];
                    }
                    return Convert.ToInt32(commandTimedOut);
                }
            }

            public static IFormatProvider DefaultCultureInfo
            {
                get
                {
                    CultureInfo defaultCultureInfo = new CultureInfo("en-US");
                    return defaultCultureInfo;
                }
            }

            public static void SetCultureInfo(string selectedLanguage)
            {
                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(selectedLanguage);
                Thread.CurrentThread.CurrentUICulture = new CultureInfo(selectedLanguage);
            }

			public static bool IamStaff
            {
                get
                {
                    bool result = false;

                    Client_User oUser = Client_User.Load(Config.CurrentUserId);
                    if (oUser != null)
                    {
                        switch (oUser.SecurityLevel)
                        {
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                result = true;
                                break;
                        }
                    }
                    return result;
                }
            }

            public static bool IamClient
            {
                get
                {
                    bool result = false;

                    Client_User oUser = Client_User.Load(Config.CurrentUserId);
                    if (oUser != null)
                    {
                        switch (oUser.SecurityLevel)
                        {
                            case 1:
                                result = true;
                                break;
                        }
                    }
                    return result;
                }
            }

            public static string InBox
            {
                get
                {
                    string result = @"C:\xFilm5.DAL\InBox";

                    if (ConfigurationManager.AppSettings["InBox"] != null)
                    {
                        result = (string)ConfigurationManager.AppSettings["InBox"];
                        if (!(Directory.Exists(result)))
                        {
                            Directory.CreateDirectory(result);
                        }
                    }

                    return result;
                }
            }

            public static string OutBox
            {
                get
                {
                    string result = @"C:\xFilm5.DAL\OutBox";

                    if (ConfigurationManager.AppSettings["OutBox"] != null)
                    {
                        result = (string)ConfigurationManager.AppSettings["OutBox"];
                        if (!(Directory.Exists(result)))
                        {
                            Directory.CreateDirectory(result);
                        }
                    }

                    return result;
                }
            }

            public static string DropBox
            {
                get
                {
                    string result = @"C:\xFilm5.DAL\DropBox";

                    if (ConfigurationManager.AppSettings["DropBox"] != null)
                    {
                        result = (string)ConfigurationManager.AppSettings["DropBox"];
                        if (!(Directory.Exists(result)))
                        {
                            Directory.CreateDirectory(result);
                        }
                    }

                    return result;
                }
            }

            public static string GsWorkFolder
            {
                get
                {
                    string result = @"C:\xFilm5.DAL\WorkFolder";

                    if (ConfigurationManager.AppSettings["Gswin32_WorkFolder"] != null)
                    {
                        result = (string)ConfigurationManager.AppSettings["Gswin32_WorkFolder"];
                        if (!(Directory.Exists(result)))
                        {
                            Directory.CreateDirectory(result);
                        }
                    }

                    return result;
                }
            }

            public static int MaxFileSize
            {
                get
                {
                    int result = 1024 * 50;

                    if (ConfigurationManager.AppSettings["MaxFileSize"] != null)
                    {
                        result = Convert.ToInt32((string)ConfigurationManager.AppSettings["MaxFileSize"]);
                    }

                    return result;
                }
            }

            public static string AttachedImageExtension
            {
                get
                {
                    string result = "bmp;gif;jpg;jpeg;png";

                    if (ConfigurationManager.AppSettings["AttachedImageExtension"] != null)
                    {
                        result = (string)ConfigurationManager.AppSettings["AttachedImageExtension"];
                    }

                    return result;
                }
            }

            public static string AttachedFileExtension
            {
                get
                {
                    string result = "txt;pdf;doc;docx;xls;xlsx";

                    if (ConfigurationManager.AppSettings["AttachedFileExtension"] != null)
                    {
                        result = (string)ConfigurationManager.AppSettings["AttachedFileExtension"];
                    }

                    return result;
                }
            }
        }
        #endregion

        public class Client
        {
            public static string InBox(int clientId)
            {
                string result = String.Empty;
                string fullpath = Path.Combine(Config.InBox, clientId.ToString());

                try
                {
                    if (!(Directory.Exists(fullpath)))
                    {
                        Directory.CreateDirectory(fullpath);
                    }
                    result = fullpath;
                }
                catch { }

                return result;
            }
            public static string DropBox(int clientId)
            {
                string result = String.Empty;
                string fullpath = Path.Combine(Config.DropBox, clientId.ToString());

                try
                {
                    if (!(Directory.Exists(fullpath)))
                    {
                        Directory.CreateDirectory(fullpath);
                    }
                    result = fullpath;
                }
                catch { }

                return result;
            }
        }

        public class Data
        {
            /// <summary>
            /// Retrieve Workshop list as Client_User Collection
            /// </summary>
            /// <returns></returns>
            public static Client_UserCollection GetWorkshopList()
            {
                string whereClause = "ClientID = 3 AND SecurityLevel = 6";
                string [] orderBy = new string [] { "FullName" };
                Client_UserCollection oList = Client_User.LoadCollection(whereClause, orderBy, true);

                return oList;
            }

            /// <summary>
            /// Appends the different Order Type with Icons to a ContextMenu
            /// </summary>
            /// <param name="ddlMenu"></param>
            public static void AppendMenuItem_OrderType(ref ContextMenu ddlMenu)
            {
                nxStudio.BaseClass.WordDict oDict = new nxStudio.BaseClass.WordDict(Common.Config.CurrentWordDict, Common.Config.CurrentLanguageId);

                ddlMenu.MenuItems.Add(new MenuItem(oDict.GetWord("upload_file"), string.Empty, "UploadFile"));
                ddlMenu.MenuItems.Add(new MenuItem(oDict.GetWord("direct_print"), string.Empty, "DirectPrint"));
                ddlMenu.MenuItems.Add(new MenuItem(oDict.GetWord("ps_file"), string.Empty, "PsFile"));
                ddlMenu.MenuItems.Add(new MenuItem(oDict.GetWord("plate"), string.Empty, "Plate"));
                ddlMenu.MenuItems.Add(new MenuItem(oDict.GetWord("film"), string.Empty, "Film"));
                ddlMenu.MenuItems.Add(new MenuItem(oDict.GetWord("vps"), string.Empty, "VPS"));

                ddlMenu.MenuItems[0].Icon = new IconResourceHandle("JobOrder.UploadFile_16.png");
                ddlMenu.MenuItems[1].Icon = new IconResourceHandle("JobOrder.DirectPrint_16.png");
                ddlMenu.MenuItems[2].Icon = new IconResourceHandle("JobOrder.PsFile_16.png");
                ddlMenu.MenuItems[3].Icon = new IconResourceHandle("JobOrder.folder_p.png");
                ddlMenu.MenuItems[4].Icon = new IconResourceHandle("JobOrder.folder_f.png");
                ddlMenu.MenuItems[5].Icon = new IconResourceHandle("JobOrder.folder_v.png");
            }

            public static void AppendMenuItem_AppViews(ref ContextMenu ddlViews)
            {
                nxStudio.BaseClass.WordDict oDict = new nxStudio.BaseClass.WordDict(Common.Config.CurrentWordDict, Common.Config.CurrentLanguageId);

                ddlViews.MenuItems.Add(new MenuItem(oDict.GetWord("icon_view"), string.Empty, "Icon"));
                ddlViews.MenuItems.Add(new MenuItem(oDict.GetWord("tile_view"), string.Empty, "Tile"));
                ddlViews.MenuItems.Add(new MenuItem(oDict.GetWord("list_view"), string.Empty, "List"));
                ddlViews.MenuItems.Add(new MenuItem(oDict.GetWord("details_view"), string.Empty, "Details"));

                ddlViews.MenuItems[0].Icon = new IconResourceHandle("16x16.appView_icons.png");
                ddlViews.MenuItems[1].Icon = new IconResourceHandle("16x16.appView_tile.png");
                ddlViews.MenuItems[2].Icon = new IconResourceHandle("16x16.appView_columns.png");
                ddlViews.MenuItems[3].Icon = new IconResourceHandle("16x16.appView_list.png");
            }

            public static void LoadCombo_CreditLimmit(ref ComboBox comboBox)
            {
                comboBox.Items.Clear();
                comboBox.Items.Add("0");
                comboBox.Items.Add("30");
                comboBox.Items.Add("60");
                comboBox.Items.Add("90");
                comboBox.SelectedIndex = 0;
            }

            public static void LoadCombo_Language(ref ComboBox comboBox)
            {
                nxStudio.BaseClass.WordDict oDict = new nxStudio.BaseClass.WordDict(Common.Config.CurrentWordDict, Common.Config.CurrentLanguageId);

                comboBox.Items.Clear();
                comboBox.Items.Add(oDict.GetWord("english"));
                comboBox.Items.Add(oDict.GetWord("simplifiedchinese"));
                comboBox.Items.Add(oDict.GetWord("traditionalchinese"));
                comboBox.SelectedIndex = 0;
            }

            public static void LoadCombo_UserRole(ref ComboBox comboBox)
            {
                comboBox.Items.Clear();
                comboBox.Items.Add(Enums.UserRole.Customer.ToString("g"));
                comboBox.Items.Add(Enums.UserRole.Operator.ToString("g"));
                comboBox.Items.Add(Enums.UserRole.Sales.ToString("g"));
                comboBox.Items.Add(Enums.UserRole.Account.ToString("g"));
                comboBox.Items.Add(Enums.UserRole.Admin.ToString("g"));
                comboBox.Items.Add(Enums.UserRole.Workshop.ToString("g"));
                comboBox.Items.Add(Enums.UserRole.Cashier.ToString("g"));
                comboBox.SelectedIndex = 0;
            }
        }

        public class Order
        {
            public static void WriteLog(int orderId, Common.Enums.Workflow workflow)
            {
                Order_Journal oLog = new Order_Journal();
                oLog.OrderID = orderId;
                oLog.UserID = Common.Config.CurrentUserId;
                oLog.Status = (int)workflow;
                oLog.DateUpdated = DateTime.Now;
                oLog.Save();
            }
            public static bool MoveToRetouch(int orderId)
            {
                bool result = false;

                OrderHeader oOrder = OrderHeader.Load(orderId);
                if (oOrder != null)
                {
                    if (oOrder.Status == (int)Common.Enums.Workflow.Queuing)
                    {
                        try
                        {
                            oOrder.Status = (int)Common.Enums.Workflow.Retouch;
                            oOrder.Save();

                            string sql = "OrderID = " + orderId.ToString();
                            Order_Internal oInternal = Order_Internal.LoadWhere(sql);
                            if (oInternal == null)
                            {
                                oInternal = new Order_Internal();
                                oInternal.OrderID = orderId;
                            }
                            oInternal.OutputBy = Common.Config.CurrentUserId;
                            oInternal.Save();

                            WriteLog(orderId, Enums.Workflow.Retouch);
                            result = true;
                        }
                        catch { }
                    }
                }

                return result;
            }
            public static bool MoveToPrinting(int orderId)
            {
                bool result = false;

                OrderHeader oOrder = OrderHeader.Load(orderId);
                if (oOrder != null)
                {
                    if (oOrder.Status == (int)Common.Enums.Workflow.Retouch)
                    {
                        try
                        {
                            oOrder.Status = (int)Common.Enums.Workflow.Printing;
                            oOrder.Save();
                            WriteLog(orderId, Enums.Workflow.Printing);
                            result = true;
                        }
                        catch { }
                    }
                }

                return result;
            }
            public static bool MoveToProofingOutgoing(int orderId)
            {
                bool result = false;

                OrderHeader oOrder = OrderHeader.Load(orderId);
                if (oOrder != null)
                {
                    if (oOrder.Status == (int)Common.Enums.Workflow.Printing)
                    {
                        try
                        {
                            oOrder.Status = (int)Common.Enums.Workflow.ProofingOutgoing;
                            oOrder.Save();
                            WriteLog(orderId, Enums.Workflow.ProofingOutgoing);
                            result = true;
                        }
                        catch { }
                    }
                }

                return result;
            }
            public static bool MoveToProofingIncoming(int orderId)
            {
                bool result = false;

                OrderHeader oOrder = OrderHeader.Load(orderId);
                if (oOrder != null)
                {
                    if (oOrder.Status == (int)Common.Enums.Workflow.ProofingOutgoing)
                    {
                        try
                        {
                            oOrder.Status = (int)Common.Enums.Workflow.ProofingIncoming;
                            oOrder.Save();
                            WriteLog(orderId, Enums.Workflow.ProofingIncoming);
                            result = true;
                        }
                        catch { }
                    }
                }

                return result;
            }
            public static bool MoveToReady(int orderId)
            {
                bool result = false;

                OrderHeader oOrder = OrderHeader.Load(orderId);
                if (oOrder != null)
                {
                    if ((oOrder.Status == (int)Common.Enums.Workflow.Printing)
                        || (oOrder.Status == (int)Common.Enums.Workflow.ProofingIncoming)
                        || (oOrder.Status == (int)Common.Enums.Workflow.ProofingOutgoing))
                    {
                        try
                        {
                            oOrder.Status = (int)Common.Enums.Workflow.Ready;
                            oOrder.Save();
                            WriteLog(orderId, Enums.Workflow.Ready);
                            result = true;
                        }
                        catch { }
                    }
                }

                return result;
            }
            public static bool MoveToDispatch(int orderId)
            {
                bool result = false;

                OrderHeader oOrder = OrderHeader.Load(orderId);
                if (oOrder != null)
                {
                    Order_Details oDetails = Order_Details.LoadWhere(String.Format("OrderID = {0}", oOrder.ID.ToString()));

                    // 2010.08.07 paulus: 自取 或 送貨 都轉移至 Dispatch
                    //if ((oOrder.Status == (int)Common.Enums.Workflow.Ready) && (oDetails.DeliveryMethod == (int)Common.Enums.DeliveryMethod.DeliverTo ))
                    //{
                    try
                    {
                        oOrder.Status = (int)Common.Enums.Workflow.Dispatch;
                        oOrder.Save();
                        WriteLog(orderId, Enums.Workflow.Dispatch);
                        result = true;
                    }
                    catch { }
                    //}
                    //else if ((oOrder.Status == (int)Common.Enums.Workflow.Ready) && (oDetails.DeliveryMethod == (int)Common.Enums.DeliveryMethod.PickUp))
                    //{
                    //    result = MoveToCompleted(orderId);
                    //}
                }

                return result;
            }
            public static bool MoveToCompleted(int orderId)
            {
                bool result = false;

                OrderHeader oOrder = OrderHeader.Load(orderId);
                if (oOrder != null)
                {
                    if ((oOrder.Status == (int)Common.Enums.Workflow.Ready) || (oOrder.Status == (int)Common.Enums.Workflow.Dispatch))
                    {
                        try
                        {
                            oOrder.Status = (int)Common.Enums.Workflow.Completed;
                            oOrder.DateCompleted = DateTime.Now;
                            oOrder.Save();
                            WriteLog(orderId, Enums.Workflow.Completed);
                            result = true;
                        }
                        catch { }
                    }
                }

                return result;
            }
            public static bool MoveToCancelled(int orderId)
            {
                bool result = false;

                OrderHeader oOrder = OrderHeader.Load(orderId);
                if (oOrder != null)
                {
                    switch (oOrder.Status)
                    {
                        case (int)Common.Enums.Workflow.Queuing:
                        case (int)Common.Enums.Workflow.Retouch:
                        case (int)Common.Enums.Workflow.Printing:
                        case (int)Common.Enums.Workflow.ProofingOutgoing:
                        case (int)Common.Enums.Workflow.ProofingIncoming:
                        case (int)Common.Enums.Workflow.Ready:
                        case (int)Common.Enums.Workflow.Dispatch:
                            try
                            {
                                oOrder.Status = (int)Common.Enums.Workflow.Cancelled;
                                oOrder.Save();
                                WriteLog(orderId, Enums.Workflow.Cancelled);
                                result = true;
                            }
                            catch { }
                            break;
                    }
                }

                return result;
            }
            public static Common.Enums.Workflow Status(int orderId)
            {
                Common.Enums.Workflow status = Enums.Workflow.Queuing;

                OrderHeader oOrder = OrderHeader.Load(orderId);
                if (oOrder != null)
                {
                    switch (oOrder.Status)
                    {
                        case (int)Common.Enums.Workflow.Queuing:
                            status = Common.Enums.Workflow.Queuing;
                            break;
                        case (int)Common.Enums.Workflow.Retouch:
                            status = Common.Enums.Workflow.Retouch;
                            break;
                        case (int)Common.Enums.Workflow.Printing:
                            status = Common.Enums.Workflow.Printing;
                            break;
                        case (int)Common.Enums.Workflow.ProofingOutgoing:
                            status = Common.Enums.Workflow.ProofingOutgoing;
                            break;
                        case (int)Common.Enums.Workflow.ProofingIncoming:
                            status = Common.Enums.Workflow.ProofingIncoming;
                            break;
                        case (int)Common.Enums.Workflow.Ready:
                            status = Common.Enums.Workflow.Ready;
                            break;
                        case (int)Common.Enums.Workflow.Dispatch:
                            status = Common.Enums.Workflow.Dispatch;
                            break;
                        case (int)Common.Enums.Workflow.Completed:
                            status = Common.Enums.Workflow.Completed;
                            break;
                        case (int)Common.Enums.Workflow.Cancelled:
                            status = Common.Enums.Workflow.Cancelled;
                            break;
                    }
                }

                return status;
            }
        }

        public class Invoice
        {
            public static bool Post(int invoiceId)
            {
                bool result = false;

                Acct_INMaster invoice = Acct_INMaster.Load(invoiceId);
                if (invoice != null)
                {
                    result = Post(ref invoice);
                }

                return result;
            }
            public static bool Post(ref Acct_INMaster invoice)
            {
                bool result = false;
                int nextInvoiceNumber = 0;

                X_CounterCollection items = X_Counter.LoadCollection();
                if (items.Count > 0)
                {
                    try
                    {
                        X_Counter sys = items[0];
                        nextInvoiceNumber = sys.InvoiceNo;

                        invoice.InvoiceNumber = nextInvoiceNumber;
                        invoice.InvoiceDate = DateTime.Now;
                        invoice.LastModifiedBy = Common.Config.CurrentUserId;
                        invoice.LastModifiedOn = DateTime.Now;
                        invoice.Status = (int)Common.Enums.Status.Active;

                        if (invoice.PaymentType == 1)       // C.O.D.
                        {
                            invoice.Paid = true;
                            invoice.PaidOn = DateTime.Now;
                            invoice.PaidAmount = invoice.InvoiceAmount;
                        }

                        invoice.Save();

                        sys.InvoiceNo++;
                        sys.Save();

                        result = true;
                    }
                    catch { }
                }

                return result;
            }
            public static Common.Enums.EditMode GetEditMode(int orderId)
            {
                Common.Enums.EditMode result = Enums.EditMode.Add;

                OrderHeader order = OrderHeader.Load(orderId);
                if (order != null)
                {
                    result = GetEditMode(order);
                }
                return result;
            }
            public static Common.Enums.EditMode GetEditMode(OrderHeader order)
            {
                Common.Enums.EditMode result = Enums.EditMode.Add;

                Acct_INMaster invoice = Acct_INMaster.LoadWhere(String.Format("OrderID = {0}", order.ID.ToString()));
                if (invoice != null)
                {
                    switch (invoice.Status)
                    {
                        case (int)Common.Enums.Status.Draft :
                            result = Enums.EditMode.Edit;
                            break;
                        case (int)Common.Enums.Status.Active:
                        case (int)Common.Enums.Status.Inactive:
                            result = Enums.EditMode.Read;
                            break;
                    }
                }
                return result;
            }
        }
		
        #region Utility
        public class Utility
        {
            public static bool IsGUID(string expression)
            {
                if (expression != null)
                {
                    Regex guidRegEx = new Regex(@"^(\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0,1})$");
                    return guidRegEx.IsMatch(expression);
                }
                return false;
            }

            // Matches any unsigned or signed floating point number/numeric string.
            public static bool IsNumeric(string expression)
            {
                if (expression != null)
                {
                    Regex numericRegEx = new Regex(@"^-?\d+(\.\d+)?$");
                    return numericRegEx.IsMatch(expression);
                }
                return false;
            }

            public static bool IsImage(string extension)
            {
                if (extension != null)
                {
                    return Common.Config.AttachedImageExtension.Contains(extension);
                }

                return false;
            }

            /// <summary>
            /// ExtractNumbers("12EFR77")
            /// </summary>
            /// <param name="expr"></param>
            /// <returns></returns>
            public static string ExtractNumbers(string expr)
            {
                return string.Join(null, System.Text.RegularExpressions.Regex.Split(expr, "[^\\d]"));
            }
        }
        #endregion

        #region DateTime Helper
        public class DateTimeHelper
        {
            /// <summary>
            /// Convert the datetime value to string with time or without.
            /// If the value is equaled to 1900-01-01, it would return a emty value.
            /// </summary>
            /// <param name="value"></param>
            /// <param name="withTime"></param>
            /// <returns></returns>
            public static string DateTimeToString(DateTime value, bool withTime)
            {
                string formatString = GetDateFormat();
                if (withTime)
                {
                    formatString = GetDateTimeFormat();
                }

                if (!value.Equals(new DateTime(1900, 1, 1)))
                {
                    return value.ToString(formatString);
                }
                else
                {
                    return string.Empty;
                }
            }
            public static string DateTimeToString(string value, bool withTime)
            {
                string result = String.Empty;
                string formatString = GetDateFormat();
                if (withTime)
                {
                    formatString = GetDateTimeFormat();
                }
                try
                {
                    DateTime source = DateTime.Parse(value);
                    if (!source.Equals(new DateTime(1900, 1, 1)))
                    {
                        result = source.ToString(formatString);
                    }
                }
                catch {}
                return result;
            }

            public static string GetDateFormat()
            {
                string result = String.Empty;

                switch (VWGContext.Current.CurrentUICulture.ToString())
                {
                    case "zh-CHS":
                        result = "yyyy-MM-dd";
                        break;
                    case "zh-CHT":
                        result = "dd/MM/yyyy";
                        break;
                    case "en-US":
                    default:
                        result = "dd/MM/yyyy";
                        break;
                }
                result = "yyyy-MM-dd";

                return result;
            }

            public static string GetDateTimeFormat()
            {
                string result = String.Empty;

                switch (VWGContext.Current.CurrentUICulture.ToString())
                {
                    case "zh-CHS":
                        result = "yyyy-MM-dd HH:mm";
                        break;
                    case "zh-CHT":
                        result = "dd/MM/yyyy HH:mm";
                        break;
                    case "en-US":
                    default:
                        result = "dd/MM/yyyy HH:mm";
                        break;
                }
                result = "yyyy-MM-dd HH:mm";

                return result;
            }
        }
        #endregion

        #region Combo Box Item

        public class ComboItem
        {
            private string _code = string.Empty;
            private int _id = 0;

            public ComboItem(string code, int id)
            {
                _code = code;
                _id = id;
            }

            public string Code
            {
                get
                {
                    return _code;
                }
                set
                {
                    _code = value;
                }
            }

            public int Id
            {
                get
                {
                    return _id;
                }
                set
                {
                    _id = value;
                }
            }
        }

        public class ComboList : BindingList<ComboItem>
        {
        }

        #endregion
    }
}
