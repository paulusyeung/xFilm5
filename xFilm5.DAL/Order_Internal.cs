using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace xFilm5.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.Order_Internal.
    /// Date Created:   2016-06-25 12:45:41
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class Order_Internal
    {
        private int key = 0;
        private int iD = 0;
        private int orderID = 0;
        private int outputBy = 0;
        private bool a4;
        private short a4Qty;
        private bool a3;
        private short a3Qty;
        private bool a4SetWProof;
        private short a4SetWProofQty;
        private bool a3SetWProof;
        private short a3SetWProofQty;
        private bool otherSize;
        private short otherSizeW;
        private short otherSizeH;
        private short otherSizeQty;
        private bool proofing4C;
        private short proofing4CQty;
        private bool proofingSpotColor;
        private short proofingSpotColorQty;
        private bool proofingAdditional;
        private short proofingAdditionalQty;
        private bool artworkFee;
        private decimal artworkFeeAmount;
        private bool urgentCharge;
        private bool reprint;
        private string reprintText = String.Empty;
        private DateTime dateUpdated = DateTime.Parse("1900-1-1");
        private short updateCounter;

        /// <summary>
        /// Initialize an new empty Order_Internal object.
        /// </summary>
        public Order_Internal()
        {
        }

        /// <summary>
        /// Initialize a new Order_Internal object with the given parameters.
        /// </summary>
        public Order_Internal(int iD, int orderID, int outputBy, bool a4, short a4Qty, bool a3, short a3Qty, bool a4SetWProof, short a4SetWProofQty, bool a3SetWProof, short a3SetWProofQty, bool otherSize, short otherSizeW, short otherSizeH, short otherSizeQty, bool proofing4C, short proofing4CQty, bool proofingSpotColor, short proofingSpotColorQty, bool proofingAdditional, short proofingAdditionalQty, bool artworkFee, decimal artworkFeeAmount, bool urgentCharge, bool reprint, string reprintText, DateTime dateUpdated, short updateCounter)
        {
            this.iD = iD;
            this.orderID = orderID;
            this.outputBy = outputBy;
            this.a4 = a4;
            this.a4Qty = a4Qty;
            this.a3 = a3;
            this.a3Qty = a3Qty;
            this.a4SetWProof = a4SetWProof;
            this.a4SetWProofQty = a4SetWProofQty;
            this.a3SetWProof = a3SetWProof;
            this.a3SetWProofQty = a3SetWProofQty;
            this.otherSize = otherSize;
            this.otherSizeW = otherSizeW;
            this.otherSizeH = otherSizeH;
            this.otherSizeQty = otherSizeQty;
            this.proofing4C = proofing4C;
            this.proofing4CQty = proofing4CQty;
            this.proofingSpotColor = proofingSpotColor;
            this.proofingSpotColorQty = proofingSpotColorQty;
            this.proofingAdditional = proofingAdditional;
            this.proofingAdditionalQty = proofingAdditionalQty;
            this.artworkFee = artworkFee;
            this.artworkFeeAmount = artworkFeeAmount;
            this.urgentCharge = urgentCharge;
            this.reprint = reprint;
            this.reprintText = reprintText;
            this.dateUpdated = dateUpdated;
            this.updateCounter = updateCounter;
        }

        /// <summary>
        /// Loads a Order_Internal object from the database using the given ID
        /// </summary>
        /// <param name="iD">The primary key value</param>
        /// <returns>A Order_Internal object</returns>
        public static Order_Internal Load(int iD)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ID", iD) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spOrder_Internal_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    Order_Internal result = new Order_Internal();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a Order_Internal object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A Order_Internal object</returns>
        public static Order_Internal LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spOrder_Internal_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    Order_Internal result = new Order_Internal();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a collection of Order_Internal objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Order_Internal objects in the database.</returns>
        public static Order_InternalCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] { };
            return LoadCollection("spOrder_Internal_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Order_Internal objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Order_Internal objects in the database ordered by the columns specified.</returns>
        public static Order_InternalCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length - 1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spOrder_Internal_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Order_Internal objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Order_Internal objects in the database.</returns>
        public static Order_InternalCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spOrder_Internal_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Order_Internal objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Order_Internal objects in the database ordered by the columns specified.</returns>
        public static Order_InternalCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length - 1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spOrder_Internal_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Order_Internal objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Order_Internal objects in the database.</returns>
        public static Order_InternalCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            Order_InternalCollection result = new Order_InternalCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    Order_Internal tmp = new Order_Internal();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a Order_Internal object from the database.
        /// </summary>
        /// <param name="iD">The primary key value</param>
        public static void Delete(int iD)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ID", iD) };
            SqlHelper.Default.ExecuteNonQuery("spOrder_Internal_DelRec", parameterValues);
        }


        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetInt32(0);
                if (!reader.IsDBNull(0)) iD = reader.GetInt32(0);
                if (!reader.IsDBNull(1)) orderID = reader.GetInt32(1);
                if (!reader.IsDBNull(2)) outputBy = reader.GetInt32(2);
                if (!reader.IsDBNull(3)) a4 = reader.GetBoolean(3);
                if (!reader.IsDBNull(4)) a4Qty = reader.GetInt16(4);
                if (!reader.IsDBNull(5)) a3 = reader.GetBoolean(5);
                if (!reader.IsDBNull(6)) a3Qty = reader.GetInt16(6);
                if (!reader.IsDBNull(7)) a4SetWProof = reader.GetBoolean(7);
                if (!reader.IsDBNull(8)) a4SetWProofQty = reader.GetInt16(8);
                if (!reader.IsDBNull(9)) a3SetWProof = reader.GetBoolean(9);
                if (!reader.IsDBNull(10)) a3SetWProofQty = reader.GetInt16(10);
                if (!reader.IsDBNull(11)) otherSize = reader.GetBoolean(11);
                if (!reader.IsDBNull(12)) otherSizeW = reader.GetInt16(12);
                if (!reader.IsDBNull(13)) otherSizeH = reader.GetInt16(13);
                if (!reader.IsDBNull(14)) otherSizeQty = reader.GetInt16(14);
                if (!reader.IsDBNull(15)) proofing4C = reader.GetBoolean(15);
                if (!reader.IsDBNull(16)) proofing4CQty = reader.GetInt16(16);
                if (!reader.IsDBNull(17)) proofingSpotColor = reader.GetBoolean(17);
                if (!reader.IsDBNull(18)) proofingSpotColorQty = reader.GetInt16(18);
                if (!reader.IsDBNull(19)) proofingAdditional = reader.GetBoolean(19);
                if (!reader.IsDBNull(20)) proofingAdditionalQty = reader.GetInt16(20);
                if (!reader.IsDBNull(21)) artworkFee = reader.GetBoolean(21);
                if (!reader.IsDBNull(22)) artworkFeeAmount = reader.GetDecimal(22);
                if (!reader.IsDBNull(23)) urgentCharge = reader.GetBoolean(23);
                if (!reader.IsDBNull(24)) reprint = reader.GetBoolean(24);
                if (!reader.IsDBNull(25)) reprintText = reader.GetString(25);
                if (!reader.IsDBNull(26)) dateUpdated = reader.GetDateTime(26);
                if (!reader.IsDBNull(27)) updateCounter = reader.GetInt16(27);
            }
        }

        public void Delete()
        {
            Delete(this.ID);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == 0)
                Insert();
            else
            {
                if (key != ID)
                    this.Delete();
                Update();
            }
        }

        public int ID
        {
            get { return iD; }
            set { iD = value; }
        }

        public int OrderID
        {
            get { return orderID; }
            set { orderID = value; }
        }

        public int OutputBy
        {
            get { return outputBy; }
            set { outputBy = value; }
        }

        public bool A4
        {
            get { return a4; }
            set { a4 = value; }
        }

        public short A4Qty
        {
            get { return a4Qty; }
            set { a4Qty = value; }
        }

        public bool A3
        {
            get { return a3; }
            set { a3 = value; }
        }

        public short A3Qty
        {
            get { return a3Qty; }
            set { a3Qty = value; }
        }

        public bool A4SetWProof
        {
            get { return a4SetWProof; }
            set { a4SetWProof = value; }
        }

        public short A4SetWProofQty
        {
            get { return a4SetWProofQty; }
            set { a4SetWProofQty = value; }
        }

        public bool A3SetWProof
        {
            get { return a3SetWProof; }
            set { a3SetWProof = value; }
        }

        public short A3SetWProofQty
        {
            get { return a3SetWProofQty; }
            set { a3SetWProofQty = value; }
        }

        public bool OtherSize
        {
            get { return otherSize; }
            set { otherSize = value; }
        }

        public short OtherSizeW
        {
            get { return otherSizeW; }
            set { otherSizeW = value; }
        }

        public short OtherSizeH
        {
            get { return otherSizeH; }
            set { otherSizeH = value; }
        }

        public short OtherSizeQty
        {
            get { return otherSizeQty; }
            set { otherSizeQty = value; }
        }

        public bool Proofing4C
        {
            get { return proofing4C; }
            set { proofing4C = value; }
        }

        public short Proofing4CQty
        {
            get { return proofing4CQty; }
            set { proofing4CQty = value; }
        }

        public bool ProofingSpotColor
        {
            get { return proofingSpotColor; }
            set { proofingSpotColor = value; }
        }

        public short ProofingSpotColorQty
        {
            get { return proofingSpotColorQty; }
            set { proofingSpotColorQty = value; }
        }

        public bool ProofingAdditional
        {
            get { return proofingAdditional; }
            set { proofingAdditional = value; }
        }

        public short ProofingAdditionalQty
        {
            get { return proofingAdditionalQty; }
            set { proofingAdditionalQty = value; }
        }

        public bool ArtworkFee
        {
            get { return artworkFee; }
            set { artworkFee = value; }
        }

        public decimal ArtworkFeeAmount
        {
            get { return artworkFeeAmount; }
            set { artworkFeeAmount = value; }
        }

        public bool UrgentCharge
        {
            get { return urgentCharge; }
            set { urgentCharge = value; }
        }

        public bool Reprint
        {
            get { return reprint; }
            set { reprint = value; }
        }

        public string ReprintText
        {
            get { return reprintText; }
            set { reprintText = value; }
        }

        public DateTime DateUpdated
        {
            get { return dateUpdated; }
            set { dateUpdated = value; }
        }

        public short UpdateCounter
        {
            get { return updateCounter; }
            set { updateCounter = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;

            SqlHelper.Default.ExecuteNonQuery("spOrder_Internal_InsRec", "@ID", out returnedValue, parameterValues);

            iD = returnedValue != null ? (int)returnedValue : 0;
            key = returnedValue != null ? (int)returnedValue : 0;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();

            SqlHelper.Default.ExecuteNonQuery("spOrder_Internal_UpdRec", parameterValues);
        }

        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[28];
            prams[0] = GetSqlParameter("@ID", ParameterDirection.Output, SqlDbType.Int, 4, this.ID);
            prams[1] = GetSqlParameter("@OrderID", ParameterDirection.Input, SqlDbType.Int, 4, this.OrderID);
            prams[2] = GetSqlParameter("@OutputBy", ParameterDirection.Input, SqlDbType.Int, 4, this.OutputBy);
            prams[3] = GetSqlParameter("@A4", ParameterDirection.Input, SqlDbType.Bit, 1, this.A4);
            prams[4] = GetSqlParameter("@A4Qty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.A4Qty);
            prams[5] = GetSqlParameter("@A3", ParameterDirection.Input, SqlDbType.Bit, 1, this.A3);
            prams[6] = GetSqlParameter("@A3Qty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.A3Qty);
            prams[7] = GetSqlParameter("@A4SetWProof", ParameterDirection.Input, SqlDbType.Bit, 1, this.A4SetWProof);
            prams[8] = GetSqlParameter("@A4SetWProofQty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.A4SetWProofQty);
            prams[9] = GetSqlParameter("@A3SetWProof", ParameterDirection.Input, SqlDbType.Bit, 1, this.A3SetWProof);
            prams[10] = GetSqlParameter("@A3SetWProofQty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.A3SetWProofQty);
            prams[11] = GetSqlParameter("@OtherSize", ParameterDirection.Input, SqlDbType.Bit, 1, this.OtherSize);
            prams[12] = GetSqlParameter("@OtherSizeW", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.OtherSizeW);
            prams[13] = GetSqlParameter("@OtherSizeH", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.OtherSizeH);
            prams[14] = GetSqlParameter("@OtherSizeQty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.OtherSizeQty);
            prams[15] = GetSqlParameter("@Proofing4C", ParameterDirection.Input, SqlDbType.Bit, 1, this.Proofing4C);
            prams[16] = GetSqlParameter("@Proofing4CQty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.Proofing4CQty);
            prams[17] = GetSqlParameter("@ProofingSpotColor", ParameterDirection.Input, SqlDbType.Bit, 1, this.ProofingSpotColor);
            prams[18] = GetSqlParameter("@ProofingSpotColorQty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.ProofingSpotColorQty);
            prams[19] = GetSqlParameter("@ProofingAdditional", ParameterDirection.Input, SqlDbType.Bit, 1, this.ProofingAdditional);
            prams[20] = GetSqlParameter("@ProofingAdditionalQty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.ProofingAdditionalQty);
            prams[21] = GetSqlParameter("@ArtworkFee", ParameterDirection.Input, SqlDbType.Bit, 1, this.ArtworkFee);
            prams[22] = GetSqlParameter("@ArtworkFeeAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.ArtworkFeeAmount);
            prams[23] = GetSqlParameter("@UrgentCharge", ParameterDirection.Input, SqlDbType.Bit, 1, this.UrgentCharge);
            prams[24] = GetSqlParameter("@Reprint", ParameterDirection.Input, SqlDbType.Bit, 1, this.Reprint);
            prams[25] = GetSqlParameter("@ReprintText", ParameterDirection.Input, SqlDbType.NVarChar, 32, this.ReprintText);
            prams[26] = GetSqlParameter("@DateUpdated", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DateUpdated);
            prams[27] = GetSqlParameter("@UpdateCounter", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.UpdateCounter);
            return prams;
        }

        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }

        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[]
            {
                GetSqlParameterWithoutDirection("@ID", SqlDbType.Int, 4, this.ID),
                GetSqlParameterWithoutDirection("@OrderID", SqlDbType.Int, 4, this.OrderID),
                GetSqlParameterWithoutDirection("@OutputBy", SqlDbType.Int, 4, this.OutputBy),
                GetSqlParameterWithoutDirection("@A4", SqlDbType.Bit, 1, this.A4),
                GetSqlParameterWithoutDirection("@A4Qty", SqlDbType.SmallInt, 2, this.A4Qty),
                GetSqlParameterWithoutDirection("@A3", SqlDbType.Bit, 1, this.A3),
                GetSqlParameterWithoutDirection("@A3Qty", SqlDbType.SmallInt, 2, this.A3Qty),
                GetSqlParameterWithoutDirection("@A4SetWProof", SqlDbType.Bit, 1, this.A4SetWProof),
                GetSqlParameterWithoutDirection("@A4SetWProofQty", SqlDbType.SmallInt, 2, this.A4SetWProofQty),
                GetSqlParameterWithoutDirection("@A3SetWProof", SqlDbType.Bit, 1, this.A3SetWProof),
                GetSqlParameterWithoutDirection("@A3SetWProofQty", SqlDbType.SmallInt, 2, this.A3SetWProofQty),
                GetSqlParameterWithoutDirection("@OtherSize", SqlDbType.Bit, 1, this.OtherSize),
                GetSqlParameterWithoutDirection("@OtherSizeW", SqlDbType.SmallInt, 2, this.OtherSizeW),
                GetSqlParameterWithoutDirection("@OtherSizeH", SqlDbType.SmallInt, 2, this.OtherSizeH),
                GetSqlParameterWithoutDirection("@OtherSizeQty", SqlDbType.SmallInt, 2, this.OtherSizeQty),
                GetSqlParameterWithoutDirection("@Proofing4C", SqlDbType.Bit, 1, this.Proofing4C),
                GetSqlParameterWithoutDirection("@Proofing4CQty", SqlDbType.SmallInt, 2, this.Proofing4CQty),
                GetSqlParameterWithoutDirection("@ProofingSpotColor", SqlDbType.Bit, 1, this.ProofingSpotColor),
                GetSqlParameterWithoutDirection("@ProofingSpotColorQty", SqlDbType.SmallInt, 2, this.ProofingSpotColorQty),
                GetSqlParameterWithoutDirection("@ProofingAdditional", SqlDbType.Bit, 1, this.ProofingAdditional),
                GetSqlParameterWithoutDirection("@ProofingAdditionalQty", SqlDbType.SmallInt, 2, this.ProofingAdditionalQty),
                GetSqlParameterWithoutDirection("@ArtworkFee", SqlDbType.Bit, 1, this.ArtworkFee),
                GetSqlParameterWithoutDirection("@ArtworkFeeAmount", SqlDbType.Money, 8, this.ArtworkFeeAmount),
                GetSqlParameterWithoutDirection("@UrgentCharge", SqlDbType.Bit, 1, this.UrgentCharge),
                GetSqlParameterWithoutDirection("@Reprint", SqlDbType.Bit, 1, this.Reprint),
                GetSqlParameterWithoutDirection("@ReprintText", SqlDbType.NVarChar, 32, this.ReprintText),
                GetSqlParameterWithoutDirection("@DateUpdated", SqlDbType.DateTime, 8, this.DateUpdated),
                GetSqlParameterWithoutDirection("@UpdateCounter", SqlDbType.SmallInt, 2, this.UpdateCounter)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("iD: " + iD.ToString()).Append("\r\n");
            builder.Append("orderID: " + orderID.ToString()).Append("\r\n");
            builder.Append("outputBy: " + outputBy.ToString()).Append("\r\n");
            builder.Append("a4: " + a4.ToString()).Append("\r\n");
            builder.Append("a4Qty: " + a4Qty.ToString()).Append("\r\n");
            builder.Append("a3: " + a3.ToString()).Append("\r\n");
            builder.Append("a3Qty: " + a3Qty.ToString()).Append("\r\n");
            builder.Append("a4SetWProof: " + a4SetWProof.ToString()).Append("\r\n");
            builder.Append("a4SetWProofQty: " + a4SetWProofQty.ToString()).Append("\r\n");
            builder.Append("a3SetWProof: " + a3SetWProof.ToString()).Append("\r\n");
            builder.Append("a3SetWProofQty: " + a3SetWProofQty.ToString()).Append("\r\n");
            builder.Append("otherSize: " + otherSize.ToString()).Append("\r\n");
            builder.Append("otherSizeW: " + otherSizeW.ToString()).Append("\r\n");
            builder.Append("otherSizeH: " + otherSizeH.ToString()).Append("\r\n");
            builder.Append("otherSizeQty: " + otherSizeQty.ToString()).Append("\r\n");
            builder.Append("proofing4C: " + proofing4C.ToString()).Append("\r\n");
            builder.Append("proofing4CQty: " + proofing4CQty.ToString()).Append("\r\n");
            builder.Append("proofingSpotColor: " + proofingSpotColor.ToString()).Append("\r\n");
            builder.Append("proofingSpotColorQty: " + proofingSpotColorQty.ToString()).Append("\r\n");
            builder.Append("proofingAdditional: " + proofingAdditional.ToString()).Append("\r\n");
            builder.Append("proofingAdditionalQty: " + proofingAdditionalQty.ToString()).Append("\r\n");
            builder.Append("artworkFee: " + artworkFee.ToString()).Append("\r\n");
            builder.Append("artworkFeeAmount: " + artworkFeeAmount.ToString()).Append("\r\n");
            builder.Append("urgentCharge: " + urgentCharge.ToString()).Append("\r\n");
            builder.Append("reprint: " + reprint.ToString()).Append("\r\n");
            builder.Append("reprintText: " + reprintText.ToString()).Append("\r\n");
            builder.Append("dateUpdated: " + dateUpdated.ToString()).Append("\r\n");
            builder.Append("updateCounter: " + updateCounter.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }

        #region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[] { TextField });
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
        public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
        {
            string[] textField = { TextField };
            LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string[] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
        public static void LoadCombo(ref ComboBox ddList, string[] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
        {
            if (SwitchLocale)
            {
                TextField = GetSwitchLocale(TextField);
            }
            ddList.Items.Clear();

            Order_InternalCollection source;

            if (OrderBy == null || OrderBy.Length == 0)
            {
                OrderBy = TextField;
            }

            if (WhereClause.Length > 0)
            {
                source = Order_Internal.LoadCollection(WhereClause, OrderBy, true);
            }
            else
            {
                source = Order_Internal.LoadCollection(OrderBy, true);
            }

            Common.ComboList sourceList = new Common.ComboList();

            if (BlankLine)
            {
                sourceList.Add(new Common.ComboItem(BlankLineText, 0));
            }

            foreach (Order_Internal item in source)
            {
                bool filter = false;
                if (ParentFilter.Trim() != String.Empty)
                {
                    filter = true;
                    if (item.OrderID != 0)
                    {
                        filter = IgnorThis(item, ParentFilter);
                    }
                }
                if (!(filter))
                {
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ID));
                }
            }

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";

            if (ddList.Items.Count > 0)
            {
                ddList.SelectedIndex = 0;
            }
        }

        #endregion


        private static bool IgnorThis(Order_Internal target, string parentFilter)
        {
            bool result = true;
            parentFilter = parentFilter.Replace(" ", "");       // remove spaces
            parentFilter = parentFilter.Replace("'", "");       // remove '
            string[] parsed = parentFilter.Split('=');          // parse

            if (target.OrderID == 0)
            {
                PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
                string filterField = (string)pi.GetValue(target, null);
                if (filterField.ToLower() == parsed[1].ToLower())
                {
                    result = false;
                }
            }
            else
            {
                Order_Internal parentTemplate = Order_Internal.Load(target.OrderID);
                result = IgnorThis(parentTemplate, parentFilter);
            }
            return result;
        }

        private static string GetFormatedText(Order_Internal target, string[] textField, string textFormatString)
        {
            for (int i = 0; i < textField.Length; i++)
            {
                PropertyInfo pi = target.GetType().GetProperty(textField[i]);
                textFormatString = textFormatString.Replace("{" + i.ToString() + "}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
            }
            return textFormatString;
        }

        private static string[] GetSwitchLocale(string[] source)
        {
            switch (Common.Config.CurrentLanguageId)
            {
                case 2:
                    source[source.Length - 1] += "_Chs";
                    break;
                case 3:
                    source[source.Length - 1] += "_Cht";
                    break;
            }
            return source;
        }
    }


    /// <summary>
    /// Represents a collection of <see cref="Order_Internal">Order_Internal</see> objects.
    /// </summary>
    public class Order_InternalCollection : BindingList<Order_Internal>
    {
    }
}
