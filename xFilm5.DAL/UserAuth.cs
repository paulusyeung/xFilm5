using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;
using id = System.String;

namespace xFilm5.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.UserAuth.
    /// Date Created:   2016-11-13 09:16:11
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class UserAuth
    {
        private int key = 0;
        private int authId = 0;
        private int userId = 0;
        private string deviceId = String.Empty;
        private int deviceType = 0;
        private int plateform = 0;
        private Dictionary<id, MetadataAttributes> metadataXml = new Dictionary<id, MetadataAttributes>();

        /// <summary>
        /// Initialize an new empty UserAuth object.
        /// </summary>
        public UserAuth()
        {
        }
		
        /// <summary>
        /// Initialize a new UserAuth object with the given parameters.
        /// </summary>
        public UserAuth(int authId, int userId, string deviceId, int deviceType, int plateform, Dictionary<id, MetadataAttributes> metadataXml)
        {
                this.authId = authId;
                this.userId = userId;
                this.deviceId = deviceId;
                this.deviceType = deviceType;
                this.plateform = plateform;
                this.metadataXml = metadataXml;
        }	
		
        /// <summary>
        /// Loads a UserAuth object from the database using the given AuthId
        /// </summary>
        /// <param name="authId">The primary key value</param>
        /// <returns>A UserAuth object</returns>
        public static UserAuth Load(int authId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@AuthId", authId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spUserAuth_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    UserAuth result = new UserAuth();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a UserAuth object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A UserAuth object</returns>
        public static UserAuth LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spUserAuth_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    UserAuth result = new UserAuth();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of UserAuth objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the UserAuth objects in the database.</returns>
        public static UserAuthCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spUserAuth_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of UserAuth objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the UserAuth objects in the database ordered by the columns specified.</returns>
        public static UserAuthCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spUserAuth_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of UserAuth objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the UserAuth objects in the database.</returns>
        public static UserAuthCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spUserAuth_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of UserAuth objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the UserAuth objects in the database ordered by the columns specified.</returns>
        public static UserAuthCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spUserAuth_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of UserAuth objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the UserAuth objects in the database.</returns>
        public static UserAuthCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            UserAuthCollection result = new UserAuthCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    UserAuth tmp = new UserAuth();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a UserAuth object from the database.
        /// </summary>
        /// <param name="authId">The primary key value</param>
        public static void Delete(int authId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@AuthId", authId) };
            SqlHelper.Default.ExecuteNonQuery("spUserAuth_DelRec", parameterValues);
        }

        #region XML Manipulation

        #region Metadata Attributes
        
        public class MetadataAttribute
        {
            private string _key = string.Empty;
            private string _value = string.Empty;

            public MetadataAttribute(string key, string value)
            {
                _key = key;
                _value = value;
            }

            public string Key
            {
                get
                {
                    return _key;
                }
                set
                {
                    _key = value;
                }
            }

            public string Value
            {
                get
                {
                    return _value;
                }
                set
                {
                    _value = value;
                }
            }
        }

        public class MetadataAttributes : BindingList<MetadataAttribute>
        {
        }

        #endregion

        protected string RootNode = "Metadata";

        /// <summary>
        /// Process the SqlXml Data from Database to prepare MetadataXml.
        /// </summary>
        private void PrepareMetadataXml(SqlXml dataXml, out Dictionary<id, MetadataAttributes> metadataXml)
        {
            metadataXml = new Dictionary<id, MetadataAttributes>();

            if (!dataXml.IsNull)
            {
                XmlDocument metadata = new XmlDocument();
                metadata.LoadXml(dataXml.Value);

                XmlNodeList dataList = metadata.SelectNodes("//data");
                if (dataList.Count > 0)
                {
                    MetadataAttributes attributes = new MetadataAttributes();

                    foreach (XmlNode node in dataList)
                    {
                        string key = node.ChildNodes[0].InnerText;
                        string value = node.ChildNodes[1].InnerText;

                        attributes.Add(new MetadataAttribute(key, value));
                    }

                    if (attributes.Count > 0)
                    {
                        metadataXml.Add("data", attributes);
                    }
                }
                else
                {
                    MetadataAttributes attributes = new MetadataAttributes();
                    XmlNodeList targetNode = metadata.SelectNodes("//" + RootNode);
                    foreach (XmlNode node in targetNode)
                    {
                        if (node.HasChildNodes)
                        {
                            ProcessingNodes(node, ref metadataXml, attributes);
                        }
                        else
                        {
                            XmlAttributeCollection attrList = node.Attributes;
                            foreach (XmlAttribute attr in attrList)
                            {
                                attributes.Add(new MetadataAttribute(attr.Name, attr.Value));
                            }

                            if (attributes.Count > 0)
                            {
                                metadataXml.Add("data", attributes);
                            }
                        }
                    }
                }
            }
        }

        private void ProcessingNodes(XmlNode node, ref Dictionary<id, MetadataAttributes> metadataXml, MetadataAttributes attributes)
        {
            foreach (XmlNode child in node)
            {
                attributes = new MetadataAttributes();
                string metadataKey = string.Empty;
                XmlAttributeCollection attrList = child.Attributes;
                foreach (XmlAttribute attr in attrList)
                {
                    if (attr.Name == "id")
                    {
                        metadataKey = attr.Value;
                    }
                    else
                    {
                        attributes.Add(new MetadataAttribute(attr.Name, attr.Value));
                    }
                }

                if (metadataKey != string.Empty)
                {
                    metadataXml.Add(metadataKey, attributes);
                }
            }
        }

        /// <summary>
        /// Generate xml string.
        /// </summary>
        /// <returns>.</returns>
        public string GenerateXml(Dictionary<string, MetadataAttributes> metadataXml)
        {
            string sqlXml = string.Empty;
            XmlDocument metadata = new XmlDocument();
            XmlNode node = metadata.AppendChild(metadata.CreateElement(RootNode));

            foreach (KeyValuePair<id, MetadataAttributes> kvp in metadataXml)
            {
                XmlElement element = metadata.CreateElement("record");
                element.SetAttribute("id", kvp.Key);

                foreach (MetadataAttribute attr in kvp.Value)
                {
                    element.SetAttribute(attr.Key, attr.Value);
                }

                node.AppendChild(element);
            }

            sqlXml = metadata.OuterXml;
            return sqlXml;
        }
        

        public MetadataAttributes GetMetadataList(string id)
        {
            if (this.metadataXml.ContainsKey(id))
            {
                return this.metadataXml[id];
            }
            else
            {
                return new MetadataAttributes();
            }
        }

        /// <summary>
        /// GetMetadata by Key.
        /// </summary>
        /// <returns>The string value of the Key.</returns>
        public string GetMetadata(string key)
        {
            if (this.GetMetadataList("data").Count > 0)
            {
                MetadataAttributes attributes = this.GetMetadataList("data");
                string value = string.Empty;
                foreach (MetadataAttribute attr in attributes)
                {
                    if (attr.Key == key)
                    {
                        value = attr.Value;
                        break;
                    }
                }
                return value;
            }
            else
            {
                return string.Empty;
            }
        }

        /// <summary>
        /// Set Metadata with id = key
        /// </summary>
        public void SetMetadata(string key, MetadataAttributes data)
        {
            if (this.metadataXml == null)
            {
                this.metadataXml = new Dictionary<string, MetadataAttributes>();
            }

            if (this.metadataXml.ContainsKey(key))
            {
                this.metadataXml[key] = data;
            }
            else
            {
                this.metadataXml.Add(key, data);
            }
        }

        /// <summary>
        /// Set Metadata with id = key
        /// </summary>
        /// <param name="key"></param>
        /// <param name="data"></param>
        public void SetMetadata(string key, MetadataAttribute data)
        {
            MetadataAttributes attributes = this.GetMetadataList(key);

            if (!attributes.Contains(data))
            {
                attributes.Add(data);
            }

            this.SetMetadata(key, attributes);
        }

        /// <summary>
        /// Set Metadata with default id;
        /// </summary>
        /// <param name="key"></param>
        /// <param name="data"></param>
        public void SetMetadata(string key, string data)
        {
            this.SetMetadata("data", new MetadataAttribute(key, data));
        }
        
        #endregion
		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetInt32(0);
                if (!reader.IsDBNull(0)) authId = reader.GetInt32(0);
                if (!reader.IsDBNull(1)) userId = reader.GetInt32(1);
                if (!reader.IsDBNull(2)) deviceId = reader.GetString(2);
                if (!reader.IsDBNull(3)) deviceType = reader.GetInt32(3);
                if (!reader.IsDBNull(4)) plateform = reader.GetInt32(4);
                if (!reader.IsDBNull(5)) 
				{
					this.PrepareMetadataXml(reader.GetSqlXml(5), out this.metadataXml);
				}
					
            }
        }
		
        public void Delete()
        {
            Delete(this.AuthId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == 0)
                Insert();
            else
            {
                if (key != AuthId)
                    this.Delete();
                Update();
            }
        }

        public int AuthId
        {
            get { return authId; }
            set { authId = value; }
        }

        public int UserId
        {
            get { return userId; }
            set { userId = value; }
        }

        public string DeviceId
        {
            get { return deviceId; }
            set { deviceId = value; }
        }

        public int DeviceType
        {
            get { return deviceType; }
            set { deviceType = value; }
        }

        public int Plateform
        {
            get { return plateform; }
            set { plateform = value; }
        }

        public Dictionary<id, MetadataAttributes> MetadataXml
        {
            get { return metadataXml; }
            set { metadataXml = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spUserAuth_InsRec", "@AuthId", out returnedValue, parameterValues);
            
            authId = returnedValue != null ? (int)returnedValue : 0;
            key = returnedValue != null ? (int)returnedValue : 0;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spUserAuth_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[6];
            prams[0] = GetSqlParameter("@AuthId", ParameterDirection.Output, SqlDbType.Int, 4, this.AuthId);
            prams[1] = GetSqlParameter("@UserId", ParameterDirection.Input, SqlDbType.Int, 4, this.UserId);
            prams[2] = GetSqlParameter("@DeviceId", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.DeviceId);
            prams[3] = GetSqlParameter("@DeviceType", ParameterDirection.Input, SqlDbType.Int, 4, this.DeviceType);
            prams[4] = GetSqlParameter("@Plateform", ParameterDirection.Input, SqlDbType.Int, 4, this.Plateform);
            prams[5] = GetSqlParameter("@MetadataXml", ParameterDirection.Input, SqlDbType.Xml, -1, this.GenerateXml(this.MetadataXml));
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@AuthId", SqlDbType.Int, 4, this.AuthId),
                GetSqlParameterWithoutDirection("@UserId", SqlDbType.Int, 4, this.UserId),
                GetSqlParameterWithoutDirection("@DeviceId", SqlDbType.NVarChar, 64, this.DeviceId),
                GetSqlParameterWithoutDirection("@DeviceType", SqlDbType.Int, 4, this.DeviceType),
                GetSqlParameterWithoutDirection("@Plateform", SqlDbType.Int, 4, this.Plateform),
                GetSqlParameterWithoutDirection("@MetadataXml", SqlDbType.Xml, -1, this.GenerateXml(this.MetadataXml))
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("authId: " + authId.ToString()).Append("\r\n");
            builder.Append("userId: " + userId.ToString()).Append("\r\n");
            builder.Append("deviceId: " + deviceId.ToString()).Append("\r\n");
            builder.Append("deviceType: " + deviceType.ToString()).Append("\r\n");
            builder.Append("plateform: " + plateform.ToString()).Append("\r\n");
            builder.Append("metadataXml: " + this.GenerateXml(this.MetadataXml)).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			UserAuthCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = UserAuth.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = UserAuth.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, 0));
			}
			
			foreach (UserAuth item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.UserId != 0)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.AuthId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(UserAuth target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.UserId == 0)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				UserAuth parentTemplate = UserAuth.Load(target.UserId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(UserAuth target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="UserAuth">UserAuth</see> objects.
    /// </summary>
    public class UserAuthCollection : BindingList< UserAuth>
    {
	}
}
