using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace xFilm5.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.Order_Details.
    /// Date Created:   2016-06-25 12:45:06
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class Order_Details
    {
        private int key = 0;
        private int iD = 0;
        private int orderID = 0;
        private int media = 0;
        private int platform = 0;
        private string software = String.Empty;
        private int deliveryMethod = 0;
        private int deliveryAddr = 0;
        private bool proofing;
        private int proofingWith = 0;
        private int proofingQty = 0;
        private int lineScreensResolution = 0;
        private bool standardSize;
        private int sizeID = 0;
        private bool a4Size;
        private bool a3Size;
        private bool otherSize;
        private string otherSizeText = String.Empty;
        private bool positive;
        private bool negative;
        private bool emulsionUp;
        private bool emulsionDown;
        private bool printComposite;
        private bool blackPlateOnly;
        private short pages;
        private bool separation;
        private bool separationC;
        private bool separationM;
        private bool separationY;
        private bool separationK;
        private bool dieCut;
        private bool dieCutB;
        private bool dieCutM;
        private bool dieCutC;
        private bool spotColor;
        private string spotColorText = String.Empty;
        private bool cropMarks;
        private bool blackOverprint;
        private bool registrationMarks;
        private short totalFilms;
        private bool colorPrint;
        private short colorPrintType;
        private short colorPrintQty;
        private bool colorScan;
        private short colorScanType;
        private short colorScanQty;
        private bool barcode;
        private short barcodeQty;
        private bool artwork;
        private decimal artworkAmount;

        /// <summary>
        /// Initialize an new empty Order_Details object.
        /// </summary>
        public Order_Details()
        {
        }

        /// <summary>
        /// Initialize a new Order_Details object with the given parameters.
        /// </summary>
        public Order_Details(int iD, int orderID, int media, int platform, string software, int deliveryMethod, int deliveryAddr, bool proofing, int proofingWith, int proofingQty, int lineScreensResolution, bool standardSize, int sizeID, bool a4Size, bool a3Size, bool otherSize, string otherSizeText, bool positive, bool negative, bool emulsionUp, bool emulsionDown, bool printComposite, bool blackPlateOnly, short pages, bool separation, bool separationC, bool separationM, bool separationY, bool separationK, bool dieCut, bool dieCutB, bool dieCutM, bool dieCutC, bool spotColor, string spotColorText, bool cropMarks, bool blackOverprint, bool registrationMarks, short totalFilms, bool colorPrint, short colorPrintType, short colorPrintQty, bool colorScan, short colorScanType, short colorScanQty, bool barcode, short barcodeQty, bool artwork, decimal artworkAmount)
        {
            this.iD = iD;
            this.orderID = orderID;
            this.media = media;
            this.platform = platform;
            this.software = software;
            this.deliveryMethod = deliveryMethod;
            this.deliveryAddr = deliveryAddr;
            this.proofing = proofing;
            this.proofingWith = proofingWith;
            this.proofingQty = proofingQty;
            this.lineScreensResolution = lineScreensResolution;
            this.standardSize = standardSize;
            this.sizeID = sizeID;
            this.a4Size = a4Size;
            this.a3Size = a3Size;
            this.otherSize = otherSize;
            this.otherSizeText = otherSizeText;
            this.positive = positive;
            this.negative = negative;
            this.emulsionUp = emulsionUp;
            this.emulsionDown = emulsionDown;
            this.printComposite = printComposite;
            this.blackPlateOnly = blackPlateOnly;
            this.pages = pages;
            this.separation = separation;
            this.separationC = separationC;
            this.separationM = separationM;
            this.separationY = separationY;
            this.separationK = separationK;
            this.dieCut = dieCut;
            this.dieCutB = dieCutB;
            this.dieCutM = dieCutM;
            this.dieCutC = dieCutC;
            this.spotColor = spotColor;
            this.spotColorText = spotColorText;
            this.cropMarks = cropMarks;
            this.blackOverprint = blackOverprint;
            this.registrationMarks = registrationMarks;
            this.totalFilms = totalFilms;
            this.colorPrint = colorPrint;
            this.colorPrintType = colorPrintType;
            this.colorPrintQty = colorPrintQty;
            this.colorScan = colorScan;
            this.colorScanType = colorScanType;
            this.colorScanQty = colorScanQty;
            this.barcode = barcode;
            this.barcodeQty = barcodeQty;
            this.artwork = artwork;
            this.artworkAmount = artworkAmount;
        }

        /// <summary>
        /// Loads a Order_Details object from the database using the given ID
        /// </summary>
        /// <param name="iD">The primary key value</param>
        /// <returns>A Order_Details object</returns>
        public static Order_Details Load(int iD)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ID", iD) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spOrder_Details_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    Order_Details result = new Order_Details();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a Order_Details object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A Order_Details object</returns>
        public static Order_Details LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spOrder_Details_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    Order_Details result = new Order_Details();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a collection of Order_Details objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Order_Details objects in the database.</returns>
        public static Order_DetailsCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] { };
            return LoadCollection("spOrder_Details_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Order_Details objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Order_Details objects in the database ordered by the columns specified.</returns>
        public static Order_DetailsCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length - 1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spOrder_Details_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Order_Details objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Order_Details objects in the database.</returns>
        public static Order_DetailsCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spOrder_Details_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Order_Details objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Order_Details objects in the database ordered by the columns specified.</returns>
        public static Order_DetailsCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length - 1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spOrder_Details_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Order_Details objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Order_Details objects in the database.</returns>
        public static Order_DetailsCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            Order_DetailsCollection result = new Order_DetailsCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    Order_Details tmp = new Order_Details();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a Order_Details object from the database.
        /// </summary>
        /// <param name="iD">The primary key value</param>
        public static void Delete(int iD)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ID", iD) };
            SqlHelper.Default.ExecuteNonQuery("spOrder_Details_DelRec", parameterValues);
        }


        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetInt32(0);
                if (!reader.IsDBNull(0)) iD = reader.GetInt32(0);
                if (!reader.IsDBNull(1)) orderID = reader.GetInt32(1);
                if (!reader.IsDBNull(2)) media = reader.GetInt32(2);
                if (!reader.IsDBNull(3)) platform = reader.GetInt32(3);
                if (!reader.IsDBNull(4)) software = reader.GetString(4);
                if (!reader.IsDBNull(5)) deliveryMethod = reader.GetInt32(5);
                if (!reader.IsDBNull(6)) deliveryAddr = reader.GetInt32(6);
                if (!reader.IsDBNull(7)) proofing = reader.GetBoolean(7);
                if (!reader.IsDBNull(8)) proofingWith = reader.GetInt32(8);
                if (!reader.IsDBNull(9)) proofingQty = reader.GetInt32(9);
                if (!reader.IsDBNull(10)) lineScreensResolution = reader.GetInt32(10);
                if (!reader.IsDBNull(11)) standardSize = reader.GetBoolean(11);
                if (!reader.IsDBNull(12)) sizeID = reader.GetInt32(12);
                if (!reader.IsDBNull(13)) a4Size = reader.GetBoolean(13);
                if (!reader.IsDBNull(14)) a3Size = reader.GetBoolean(14);
                if (!reader.IsDBNull(15)) otherSize = reader.GetBoolean(15);
                if (!reader.IsDBNull(16)) otherSizeText = reader.GetString(16);
                if (!reader.IsDBNull(17)) positive = reader.GetBoolean(17);
                if (!reader.IsDBNull(18)) negative = reader.GetBoolean(18);
                if (!reader.IsDBNull(19)) emulsionUp = reader.GetBoolean(19);
                if (!reader.IsDBNull(20)) emulsionDown = reader.GetBoolean(20);
                if (!reader.IsDBNull(21)) printComposite = reader.GetBoolean(21);
                if (!reader.IsDBNull(22)) blackPlateOnly = reader.GetBoolean(22);
                if (!reader.IsDBNull(23)) pages = reader.GetInt16(23);
                if (!reader.IsDBNull(24)) separation = reader.GetBoolean(24);
                if (!reader.IsDBNull(25)) separationC = reader.GetBoolean(25);
                if (!reader.IsDBNull(26)) separationM = reader.GetBoolean(26);
                if (!reader.IsDBNull(27)) separationY = reader.GetBoolean(27);
                if (!reader.IsDBNull(28)) separationK = reader.GetBoolean(28);
                if (!reader.IsDBNull(29)) dieCut = reader.GetBoolean(29);
                if (!reader.IsDBNull(30)) dieCutB = reader.GetBoolean(30);
                if (!reader.IsDBNull(31)) dieCutM = reader.GetBoolean(31);
                if (!reader.IsDBNull(32)) dieCutC = reader.GetBoolean(32);
                if (!reader.IsDBNull(33)) spotColor = reader.GetBoolean(33);
                if (!reader.IsDBNull(34)) spotColorText = reader.GetString(34);
                if (!reader.IsDBNull(35)) cropMarks = reader.GetBoolean(35);
                if (!reader.IsDBNull(36)) blackOverprint = reader.GetBoolean(36);
                if (!reader.IsDBNull(37)) registrationMarks = reader.GetBoolean(37);
                if (!reader.IsDBNull(38)) totalFilms = reader.GetInt16(38);
                if (!reader.IsDBNull(39)) colorPrint = reader.GetBoolean(39);
                if (!reader.IsDBNull(40)) colorPrintType = reader.GetInt16(40);
                if (!reader.IsDBNull(41)) colorPrintQty = reader.GetInt16(41);
                if (!reader.IsDBNull(42)) colorScan = reader.GetBoolean(42);
                if (!reader.IsDBNull(43)) colorScanType = reader.GetInt16(43);
                if (!reader.IsDBNull(44)) colorScanQty = reader.GetInt16(44);
                if (!reader.IsDBNull(45)) barcode = reader.GetBoolean(45);
                if (!reader.IsDBNull(46)) barcodeQty = reader.GetInt16(46);
                if (!reader.IsDBNull(47)) artwork = reader.GetBoolean(47);
                if (!reader.IsDBNull(48)) artworkAmount = reader.GetDecimal(48);
            }
        }

        public void Delete()
        {
            Delete(this.ID);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == 0)
                Insert();
            else
            {
                if (key != ID)
                    this.Delete();
                Update();
            }
        }

        public int ID
        {
            get { return iD; }
            set { iD = value; }
        }

        public int OrderID
        {
            get { return orderID; }
            set { orderID = value; }
        }

        public int Media
        {
            get { return media; }
            set { media = value; }
        }

        public int Platform
        {
            get { return platform; }
            set { platform = value; }
        }

        public string Software
        {
            get { return software; }
            set { software = value; }
        }

        public int DeliveryMethod
        {
            get { return deliveryMethod; }
            set { deliveryMethod = value; }
        }

        public int DeliveryAddr
        {
            get { return deliveryAddr; }
            set { deliveryAddr = value; }
        }

        public bool Proofing
        {
            get { return proofing; }
            set { proofing = value; }
        }

        public int ProofingWith
        {
            get { return proofingWith; }
            set { proofingWith = value; }
        }

        public int ProofingQty
        {
            get { return proofingQty; }
            set { proofingQty = value; }
        }

        public int LineScreensResolution
        {
            get { return lineScreensResolution; }
            set { lineScreensResolution = value; }
        }

        public bool StandardSize
        {
            get { return standardSize; }
            set { standardSize = value; }
        }

        public int SizeID
        {
            get { return sizeID; }
            set { sizeID = value; }
        }

        public bool A4Size
        {
            get { return a4Size; }
            set { a4Size = value; }
        }

        public bool A3Size
        {
            get { return a3Size; }
            set { a3Size = value; }
        }

        public bool OtherSize
        {
            get { return otherSize; }
            set { otherSize = value; }
        }

        public string OtherSizeText
        {
            get { return otherSizeText; }
            set { otherSizeText = value; }
        }

        public bool Positive
        {
            get { return positive; }
            set { positive = value; }
        }

        public bool Negative
        {
            get { return negative; }
            set { negative = value; }
        }

        public bool EmulsionUp
        {
            get { return emulsionUp; }
            set { emulsionUp = value; }
        }

        public bool EmulsionDown
        {
            get { return emulsionDown; }
            set { emulsionDown = value; }
        }

        public bool PrintComposite
        {
            get { return printComposite; }
            set { printComposite = value; }
        }

        public bool BlackPlateOnly
        {
            get { return blackPlateOnly; }
            set { blackPlateOnly = value; }
        }

        public short Pages
        {
            get { return pages; }
            set { pages = value; }
        }

        public bool Separation
        {
            get { return separation; }
            set { separation = value; }
        }

        public bool SeparationC
        {
            get { return separationC; }
            set { separationC = value; }
        }

        public bool SeparationM
        {
            get { return separationM; }
            set { separationM = value; }
        }

        public bool SeparationY
        {
            get { return separationY; }
            set { separationY = value; }
        }

        public bool SeparationK
        {
            get { return separationK; }
            set { separationK = value; }
        }

        public bool DieCut
        {
            get { return dieCut; }
            set { dieCut = value; }
        }

        public bool DieCutB
        {
            get { return dieCutB; }
            set { dieCutB = value; }
        }

        public bool DieCutM
        {
            get { return dieCutM; }
            set { dieCutM = value; }
        }

        public bool DieCutC
        {
            get { return dieCutC; }
            set { dieCutC = value; }
        }

        public bool SpotColor
        {
            get { return spotColor; }
            set { spotColor = value; }
        }

        public string SpotColorText
        {
            get { return spotColorText; }
            set { spotColorText = value; }
        }

        public bool CropMarks
        {
            get { return cropMarks; }
            set { cropMarks = value; }
        }

        public bool BlackOverprint
        {
            get { return blackOverprint; }
            set { blackOverprint = value; }
        }

        public bool RegistrationMarks
        {
            get { return registrationMarks; }
            set { registrationMarks = value; }
        }

        public short TotalFilms
        {
            get { return totalFilms; }
            set { totalFilms = value; }
        }

        public bool ColorPrint
        {
            get { return colorPrint; }
            set { colorPrint = value; }
        }

        public short ColorPrintType
        {
            get { return colorPrintType; }
            set { colorPrintType = value; }
        }

        public short ColorPrintQty
        {
            get { return colorPrintQty; }
            set { colorPrintQty = value; }
        }

        public bool ColorScan
        {
            get { return colorScan; }
            set { colorScan = value; }
        }

        public short ColorScanType
        {
            get { return colorScanType; }
            set { colorScanType = value; }
        }

        public short ColorScanQty
        {
            get { return colorScanQty; }
            set { colorScanQty = value; }
        }

        public bool Barcode
        {
            get { return barcode; }
            set { barcode = value; }
        }

        public short BarcodeQty
        {
            get { return barcodeQty; }
            set { barcodeQty = value; }
        }

        public bool Artwork
        {
            get { return artwork; }
            set { artwork = value; }
        }

        public decimal ArtworkAmount
        {
            get { return artworkAmount; }
            set { artworkAmount = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;

            SqlHelper.Default.ExecuteNonQuery("spOrder_Details_InsRec", "@ID", out returnedValue, parameterValues);

            iD = returnedValue != null ? (int)returnedValue : 0;
            key = returnedValue != null ? (int)returnedValue : 0;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();

            SqlHelper.Default.ExecuteNonQuery("spOrder_Details_UpdRec", parameterValues);
        }

        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[49];
            prams[0] = GetSqlParameter("@ID", ParameterDirection.Output, SqlDbType.Int, 4, this.ID);
            prams[1] = GetSqlParameter("@OrderID", ParameterDirection.Input, SqlDbType.Int, 4, this.OrderID);
            prams[2] = GetSqlParameter("@Media", ParameterDirection.Input, SqlDbType.Int, 4, this.Media);
            prams[3] = GetSqlParameter("@Platform", ParameterDirection.Input, SqlDbType.Int, 4, this.Platform);
            prams[4] = GetSqlParameter("@Software", ParameterDirection.Input, SqlDbType.NVarChar, 32, this.Software);
            prams[5] = GetSqlParameter("@DeliveryMethod", ParameterDirection.Input, SqlDbType.Int, 4, this.DeliveryMethod);
            prams[6] = GetSqlParameter("@DeliveryAddr", ParameterDirection.Input, SqlDbType.Int, 4, this.DeliveryAddr);
            prams[7] = GetSqlParameter("@Proofing", ParameterDirection.Input, SqlDbType.Bit, 1, this.Proofing);
            prams[8] = GetSqlParameter("@ProofingWith", ParameterDirection.Input, SqlDbType.Int, 4, this.ProofingWith);
            prams[9] = GetSqlParameter("@ProofingQty", ParameterDirection.Input, SqlDbType.Int, 4, this.ProofingQty);
            prams[10] = GetSqlParameter("@LineScreensResolution", ParameterDirection.Input, SqlDbType.Int, 4, this.LineScreensResolution);
            prams[11] = GetSqlParameter("@StandardSize", ParameterDirection.Input, SqlDbType.Bit, 1, this.StandardSize);
            prams[12] = GetSqlParameter("@SizeID", ParameterDirection.Input, SqlDbType.Int, 4, this.SizeID);
            prams[13] = GetSqlParameter("@A4Size", ParameterDirection.Input, SqlDbType.Bit, 1, this.A4Size);
            prams[14] = GetSqlParameter("@A3Size", ParameterDirection.Input, SqlDbType.Bit, 1, this.A3Size);
            prams[15] = GetSqlParameter("@OtherSize", ParameterDirection.Input, SqlDbType.Bit, 1, this.OtherSize);
            prams[16] = GetSqlParameter("@OtherSizeText", ParameterDirection.Input, SqlDbType.NVarChar, 32, this.OtherSizeText);
            prams[17] = GetSqlParameter("@Positive", ParameterDirection.Input, SqlDbType.Bit, 1, this.Positive);
            prams[18] = GetSqlParameter("@Negative", ParameterDirection.Input, SqlDbType.Bit, 1, this.Negative);
            prams[19] = GetSqlParameter("@EmulsionUp", ParameterDirection.Input, SqlDbType.Bit, 1, this.EmulsionUp);
            prams[20] = GetSqlParameter("@EmulsionDown", ParameterDirection.Input, SqlDbType.Bit, 1, this.EmulsionDown);
            prams[21] = GetSqlParameter("@PrintComposite", ParameterDirection.Input, SqlDbType.Bit, 1, this.PrintComposite);
            prams[22] = GetSqlParameter("@BlackPlateOnly", ParameterDirection.Input, SqlDbType.Bit, 1, this.BlackPlateOnly);
            prams[23] = GetSqlParameter("@Pages", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.Pages);
            prams[24] = GetSqlParameter("@Separation", ParameterDirection.Input, SqlDbType.Bit, 1, this.Separation);
            prams[25] = GetSqlParameter("@SeparationC", ParameterDirection.Input, SqlDbType.Bit, 1, this.SeparationC);
            prams[26] = GetSqlParameter("@SeparationM", ParameterDirection.Input, SqlDbType.Bit, 1, this.SeparationM);
            prams[27] = GetSqlParameter("@SeparationY", ParameterDirection.Input, SqlDbType.Bit, 1, this.SeparationY);
            prams[28] = GetSqlParameter("@SeparationK", ParameterDirection.Input, SqlDbType.Bit, 1, this.SeparationK);
            prams[29] = GetSqlParameter("@DieCut", ParameterDirection.Input, SqlDbType.Bit, 1, this.DieCut);
            prams[30] = GetSqlParameter("@DieCutB", ParameterDirection.Input, SqlDbType.Bit, 1, this.DieCutB);
            prams[31] = GetSqlParameter("@DieCutM", ParameterDirection.Input, SqlDbType.Bit, 1, this.DieCutM);
            prams[32] = GetSqlParameter("@DieCutC", ParameterDirection.Input, SqlDbType.Bit, 1, this.DieCutC);
            prams[33] = GetSqlParameter("@SpotColor", ParameterDirection.Input, SqlDbType.Bit, 1, this.SpotColor);
            prams[34] = GetSqlParameter("@SpotColorText", ParameterDirection.Input, SqlDbType.NVarChar, 32, this.SpotColorText);
            prams[35] = GetSqlParameter("@CropMarks", ParameterDirection.Input, SqlDbType.Bit, 1, this.CropMarks);
            prams[36] = GetSqlParameter("@BlackOverprint", ParameterDirection.Input, SqlDbType.Bit, 1, this.BlackOverprint);
            prams[37] = GetSqlParameter("@RegistrationMarks", ParameterDirection.Input, SqlDbType.Bit, 1, this.RegistrationMarks);
            prams[38] = GetSqlParameter("@TotalFilms", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.TotalFilms);
            prams[39] = GetSqlParameter("@ColorPrint", ParameterDirection.Input, SqlDbType.Bit, 1, this.ColorPrint);
            prams[40] = GetSqlParameter("@ColorPrintType", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.ColorPrintType);
            prams[41] = GetSqlParameter("@ColorPrintQty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.ColorPrintQty);
            prams[42] = GetSqlParameter("@ColorScan", ParameterDirection.Input, SqlDbType.Bit, 1, this.ColorScan);
            prams[43] = GetSqlParameter("@ColorScanType", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.ColorScanType);
            prams[44] = GetSqlParameter("@ColorScanQty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.ColorScanQty);
            prams[45] = GetSqlParameter("@Barcode", ParameterDirection.Input, SqlDbType.Bit, 1, this.Barcode);
            prams[46] = GetSqlParameter("@BarcodeQty", ParameterDirection.Input, SqlDbType.SmallInt, 2, this.BarcodeQty);
            prams[47] = GetSqlParameter("@Artwork", ParameterDirection.Input, SqlDbType.Bit, 1, this.Artwork);
            prams[48] = GetSqlParameter("@ArtworkAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.ArtworkAmount);
            return prams;
        }

        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }

        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[]
            {
                GetSqlParameterWithoutDirection("@ID", SqlDbType.Int, 4, this.ID),
                GetSqlParameterWithoutDirection("@OrderID", SqlDbType.Int, 4, this.OrderID),
                GetSqlParameterWithoutDirection("@Media", SqlDbType.Int, 4, this.Media),
                GetSqlParameterWithoutDirection("@Platform", SqlDbType.Int, 4, this.Platform),
                GetSqlParameterWithoutDirection("@Software", SqlDbType.NVarChar, 32, this.Software),
                GetSqlParameterWithoutDirection("@DeliveryMethod", SqlDbType.Int, 4, this.DeliveryMethod),
                GetSqlParameterWithoutDirection("@DeliveryAddr", SqlDbType.Int, 4, this.DeliveryAddr),
                GetSqlParameterWithoutDirection("@Proofing", SqlDbType.Bit, 1, this.Proofing),
                GetSqlParameterWithoutDirection("@ProofingWith", SqlDbType.Int, 4, this.ProofingWith),
                GetSqlParameterWithoutDirection("@ProofingQty", SqlDbType.Int, 4, this.ProofingQty),
                GetSqlParameterWithoutDirection("@LineScreensResolution", SqlDbType.Int, 4, this.LineScreensResolution),
                GetSqlParameterWithoutDirection("@StandardSize", SqlDbType.Bit, 1, this.StandardSize),
                GetSqlParameterWithoutDirection("@SizeID", SqlDbType.Int, 4, this.SizeID),
                GetSqlParameterWithoutDirection("@A4Size", SqlDbType.Bit, 1, this.A4Size),
                GetSqlParameterWithoutDirection("@A3Size", SqlDbType.Bit, 1, this.A3Size),
                GetSqlParameterWithoutDirection("@OtherSize", SqlDbType.Bit, 1, this.OtherSize),
                GetSqlParameterWithoutDirection("@OtherSizeText", SqlDbType.NVarChar, 32, this.OtherSizeText),
                GetSqlParameterWithoutDirection("@Positive", SqlDbType.Bit, 1, this.Positive),
                GetSqlParameterWithoutDirection("@Negative", SqlDbType.Bit, 1, this.Negative),
                GetSqlParameterWithoutDirection("@EmulsionUp", SqlDbType.Bit, 1, this.EmulsionUp),
                GetSqlParameterWithoutDirection("@EmulsionDown", SqlDbType.Bit, 1, this.EmulsionDown),
                GetSqlParameterWithoutDirection("@PrintComposite", SqlDbType.Bit, 1, this.PrintComposite),
                GetSqlParameterWithoutDirection("@BlackPlateOnly", SqlDbType.Bit, 1, this.BlackPlateOnly),
                GetSqlParameterWithoutDirection("@Pages", SqlDbType.SmallInt, 2, this.Pages),
                GetSqlParameterWithoutDirection("@Separation", SqlDbType.Bit, 1, this.Separation),
                GetSqlParameterWithoutDirection("@SeparationC", SqlDbType.Bit, 1, this.SeparationC),
                GetSqlParameterWithoutDirection("@SeparationM", SqlDbType.Bit, 1, this.SeparationM),
                GetSqlParameterWithoutDirection("@SeparationY", SqlDbType.Bit, 1, this.SeparationY),
                GetSqlParameterWithoutDirection("@SeparationK", SqlDbType.Bit, 1, this.SeparationK),
                GetSqlParameterWithoutDirection("@DieCut", SqlDbType.Bit, 1, this.DieCut),
                GetSqlParameterWithoutDirection("@DieCutB", SqlDbType.Bit, 1, this.DieCutB),
                GetSqlParameterWithoutDirection("@DieCutM", SqlDbType.Bit, 1, this.DieCutM),
                GetSqlParameterWithoutDirection("@DieCutC", SqlDbType.Bit, 1, this.DieCutC),
                GetSqlParameterWithoutDirection("@SpotColor", SqlDbType.Bit, 1, this.SpotColor),
                GetSqlParameterWithoutDirection("@SpotColorText", SqlDbType.NVarChar, 32, this.SpotColorText),
                GetSqlParameterWithoutDirection("@CropMarks", SqlDbType.Bit, 1, this.CropMarks),
                GetSqlParameterWithoutDirection("@BlackOverprint", SqlDbType.Bit, 1, this.BlackOverprint),
                GetSqlParameterWithoutDirection("@RegistrationMarks", SqlDbType.Bit, 1, this.RegistrationMarks),
                GetSqlParameterWithoutDirection("@TotalFilms", SqlDbType.SmallInt, 2, this.TotalFilms),
                GetSqlParameterWithoutDirection("@ColorPrint", SqlDbType.Bit, 1, this.ColorPrint),
                GetSqlParameterWithoutDirection("@ColorPrintType", SqlDbType.SmallInt, 2, this.ColorPrintType),
                GetSqlParameterWithoutDirection("@ColorPrintQty", SqlDbType.SmallInt, 2, this.ColorPrintQty),
                GetSqlParameterWithoutDirection("@ColorScan", SqlDbType.Bit, 1, this.ColorScan),
                GetSqlParameterWithoutDirection("@ColorScanType", SqlDbType.SmallInt, 2, this.ColorScanType),
                GetSqlParameterWithoutDirection("@ColorScanQty", SqlDbType.SmallInt, 2, this.ColorScanQty),
                GetSqlParameterWithoutDirection("@Barcode", SqlDbType.Bit, 1, this.Barcode),
                GetSqlParameterWithoutDirection("@BarcodeQty", SqlDbType.SmallInt, 2, this.BarcodeQty),
                GetSqlParameterWithoutDirection("@Artwork", SqlDbType.Bit, 1, this.Artwork),
                GetSqlParameterWithoutDirection("@ArtworkAmount", SqlDbType.Money, 8, this.ArtworkAmount)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("iD: " + iD.ToString()).Append("\r\n");
            builder.Append("orderID: " + orderID.ToString()).Append("\r\n");
            builder.Append("media: " + media.ToString()).Append("\r\n");
            builder.Append("platform: " + platform.ToString()).Append("\r\n");
            builder.Append("software: " + software.ToString()).Append("\r\n");
            builder.Append("deliveryMethod: " + deliveryMethod.ToString()).Append("\r\n");
            builder.Append("deliveryAddr: " + deliveryAddr.ToString()).Append("\r\n");
            builder.Append("proofing: " + proofing.ToString()).Append("\r\n");
            builder.Append("proofingWith: " + proofingWith.ToString()).Append("\r\n");
            builder.Append("proofingQty: " + proofingQty.ToString()).Append("\r\n");
            builder.Append("lineScreensResolution: " + lineScreensResolution.ToString()).Append("\r\n");
            builder.Append("standardSize: " + standardSize.ToString()).Append("\r\n");
            builder.Append("sizeID: " + sizeID.ToString()).Append("\r\n");
            builder.Append("a4Size: " + a4Size.ToString()).Append("\r\n");
            builder.Append("a3Size: " + a3Size.ToString()).Append("\r\n");
            builder.Append("otherSize: " + otherSize.ToString()).Append("\r\n");
            builder.Append("otherSizeText: " + otherSizeText.ToString()).Append("\r\n");
            builder.Append("positive: " + positive.ToString()).Append("\r\n");
            builder.Append("negative: " + negative.ToString()).Append("\r\n");
            builder.Append("emulsionUp: " + emulsionUp.ToString()).Append("\r\n");
            builder.Append("emulsionDown: " + emulsionDown.ToString()).Append("\r\n");
            builder.Append("printComposite: " + printComposite.ToString()).Append("\r\n");
            builder.Append("blackPlateOnly: " + blackPlateOnly.ToString()).Append("\r\n");
            builder.Append("pages: " + pages.ToString()).Append("\r\n");
            builder.Append("separation: " + separation.ToString()).Append("\r\n");
            builder.Append("separationC: " + separationC.ToString()).Append("\r\n");
            builder.Append("separationM: " + separationM.ToString()).Append("\r\n");
            builder.Append("separationY: " + separationY.ToString()).Append("\r\n");
            builder.Append("separationK: " + separationK.ToString()).Append("\r\n");
            builder.Append("dieCut: " + dieCut.ToString()).Append("\r\n");
            builder.Append("dieCutB: " + dieCutB.ToString()).Append("\r\n");
            builder.Append("dieCutM: " + dieCutM.ToString()).Append("\r\n");
            builder.Append("dieCutC: " + dieCutC.ToString()).Append("\r\n");
            builder.Append("spotColor: " + spotColor.ToString()).Append("\r\n");
            builder.Append("spotColorText: " + spotColorText.ToString()).Append("\r\n");
            builder.Append("cropMarks: " + cropMarks.ToString()).Append("\r\n");
            builder.Append("blackOverprint: " + blackOverprint.ToString()).Append("\r\n");
            builder.Append("registrationMarks: " + registrationMarks.ToString()).Append("\r\n");
            builder.Append("totalFilms: " + totalFilms.ToString()).Append("\r\n");
            builder.Append("colorPrint: " + colorPrint.ToString()).Append("\r\n");
            builder.Append("colorPrintType: " + colorPrintType.ToString()).Append("\r\n");
            builder.Append("colorPrintQty: " + colorPrintQty.ToString()).Append("\r\n");
            builder.Append("colorScan: " + colorScan.ToString()).Append("\r\n");
            builder.Append("colorScanType: " + colorScanType.ToString()).Append("\r\n");
            builder.Append("colorScanQty: " + colorScanQty.ToString()).Append("\r\n");
            builder.Append("barcode: " + barcode.ToString()).Append("\r\n");
            builder.Append("barcodeQty: " + barcodeQty.ToString()).Append("\r\n");
            builder.Append("artwork: " + artwork.ToString()).Append("\r\n");
            builder.Append("artworkAmount: " + artworkAmount.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }

        #region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[] { TextField });
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
        public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
        {
            string[] textField = { TextField };
            LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string[] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
        {
            LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
        }

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
        public static void LoadCombo(ref ComboBox ddList, string[] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
        {
            if (SwitchLocale)
            {
                TextField = GetSwitchLocale(TextField);
            }
            ddList.Items.Clear();

            Order_DetailsCollection source;

            if (OrderBy == null || OrderBy.Length == 0)
            {
                OrderBy = TextField;
            }

            if (WhereClause.Length > 0)
            {
                source = Order_Details.LoadCollection(WhereClause, OrderBy, true);
            }
            else
            {
                source = Order_Details.LoadCollection(OrderBy, true);
            }

            Common.ComboList sourceList = new Common.ComboList();

            if (BlankLine)
            {
                sourceList.Add(new Common.ComboItem(BlankLineText, 0));
            }

            foreach (Order_Details item in source)
            {
                bool filter = false;
                if (ParentFilter.Trim() != String.Empty)
                {
                    filter = true;
                    if (item.OrderID != 0)
                    {
                        filter = IgnorThis(item, ParentFilter);
                    }
                }
                if (!(filter))
                {
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ID));
                }
            }

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";

            if (ddList.Items.Count > 0)
            {
                ddList.SelectedIndex = 0;
            }
        }

        #endregion


        private static bool IgnorThis(Order_Details target, string parentFilter)
        {
            bool result = true;
            parentFilter = parentFilter.Replace(" ", "");       // remove spaces
            parentFilter = parentFilter.Replace("'", "");       // remove '
            string[] parsed = parentFilter.Split('=');          // parse

            if (target.OrderID == 0)
            {
                PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
                string filterField = (string)pi.GetValue(target, null);
                if (filterField.ToLower() == parsed[1].ToLower())
                {
                    result = false;
                }
            }
            else
            {
                Order_Details parentTemplate = Order_Details.Load(target.OrderID);
                result = IgnorThis(parentTemplate, parentFilter);
            }
            return result;
        }

        private static string GetFormatedText(Order_Details target, string[] textField, string textFormatString)
        {
            for (int i = 0; i < textField.Length; i++)
            {
                PropertyInfo pi = target.GetType().GetProperty(textField[i]);
                textFormatString = textFormatString.Replace("{" + i.ToString() + "}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
            }
            return textFormatString;
        }

        private static string[] GetSwitchLocale(string[] source)
        {
            switch (Common.Config.CurrentLanguageId)
            {
                case 2:
                    source[source.Length - 1] += "_Chs";
                    break;
                case 3:
                    source[source.Length - 1] += "_Cht";
                    break;
            }
            return source;
        }
    }


    /// <summary>
    /// Represents a collection of <see cref="Order_Details">Order_Details</see> objects.
    /// </summary>
    public class Order_DetailsCollection : BindingList<Order_Details>
    {
    }
}
